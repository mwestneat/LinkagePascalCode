program JawsModel;uses fileio, DeclareInterfaces, myfunctions, DeclareToolsPlus;const	con = 0.01745329252;	var	errnum:real;	spec: array[1..100] of string[8];	c1, c2, c3, c4, c5, c6, c7, c8: array[1..100] of char;	gSaved, ExitND:boolean;	darkGray, lightgray, white, black, blue, red, green, yellow, brightBlue, purple: RGBColor;	x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8, x9, y9, x10, y10, fishok: array [1..100] of real;	x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20: array [1..100] of real;	rx1, ry1, rx2, ry2, rx3, ry3, rx4, ry4, rx5, ry5, rx6, ry6, rx7, ry7, rx8, ry8, rx9, ry9, rx10, ry10: array [1..100] of real;	rx11, ry11, rx12, ry12, rx13, ry13, rx14, ry14, rx15, ry15, rx16, ry16, rx17, ry17, rx18, ry18, rx19, ry19, rx20, ry20: array [1..100] of real;	nx1, ny1, nx2, ny2, nx3, ny3, nx4, ny4, nx5, ny5, nx6, ny6, nx7, ny7, nx8, ny8, nx9, ny9, nx10, ny10: array [1..100] of real;	nx11, ny11, nx12, ny12, nx13, ny13, nx14, ny14, nx15, ny15, nx16, ny16, nx17, ny17, nx18, ny18, nx19, ny19, nx20, ny20: array [1..100] of real;	ux1, uy1, ux2, uy2, ux3, uy3, ux4, uy4, ux5, uy5, ux6, uy6, ux7, uy7, ux8, uy8, ux9, uy9, ux10, uy10: array [1..100] of real;	ux11, uy11, ux12, uy12, ux13, uy13, ux14, uy14, ux15, uy15, ux16, uy16, ux17, uy17, ux18, uy18, ux19, uy19, ux20, uy20: array [1..100] of real;	mx1, my1, mx2, my2, mx3, my3, mx4, my4, mx5, my5, mx6, my6, mx7, my7, mx8, my8, mx9, my9, mx10, my10: array [1..100] of real;	mx11, my11, mx12, my12, mx13, my13, mx14, my14, mx15, my15, mx16, my16, mx17, my17, mx18, my18, mx19, my19, mx20, my20: array [1..100] of real;	mrx1, mry1, mrx2, mry2, mrx3, mry3, mrx4, mry4, mrx5, mry5, mrx6, mry6, mrx7, mry7, mrx8, mry8, mrx9, mry9, mrx10, mry10: array [1..100] of real;	mrx11, mry11, mrx12, mry12, mrx13, mry13, mrx14, mry14, mrx15, mry15, mrx16, mry16, mrx17, mry17, mrx18, mry18, mrx19, mry19, mrx20, mry20: array [1..100] of real;	mnx1, mny1, mnx2, mny2, mnx3, mny3, mnx4, mny4, mnx5, mny5, mnx6, mny6, mnx7, mny7, mnx8, mny8, mnx9, mny9, mnx10, mny10: array [1..100] of real;	mnx11, mny11, mnx12, mny12, mnx13, mny13, mnx14, mny14, mnx15, mny15, mnx16, mny16, mnx17, mny17, mnx18, mny18, mnx19, mny19, mnx20, mny20: array [1..100] of real;	dx1, dy1, dx2, dy2, dx3, dy3, dx4, dy4, dx5, dy5, dx6, dy6, dx7, dy7, dx8, dy8, dx9, dy9, dx10, dy10: array [1..100] of integer;	dx11, dy11, dx12, dy12, dx13, dy13, dx14, dy14, dx15, dy15, dx16, dy16, dx17, dy17, dx18, dy18, dx19, dy19, dx20, dy20: array [1..100] of integer;	drx1, dry1, drx2, dry2, drx3, dry3, drx4, dry4, drx5, dry5, drx6, dry6, drx7, dry7, drx8, dry8, drx9, dry9, drx10, dry10: array [1..100] of integer;	drx11, dry11, drx12, dry12, drx13, dry13, drx14, dry14, drx15, dry15, drx16, dry16, drx17, dry17, drx18, dry18, drx19, dry19, drx20, dry20: array [1..100] of integer;	dnx1, dny1, dnx2, dny2, dnx3, dny3, dnx4, dny4, dnx5, dny5, dnx6, dny6, dnx7, dny7, dnx8, dny8, dnx9, dny9, dnx10, dny10: array [1..100] of integer;	dnx11, dny11, dnx12, dny12, dnx13, dny13, dnx14, dny14, dnx15, dny15, dnx16, dny16, dnx17, dny17, dnx18, dny18, dnx19, dny19, dnx20, dny20: array [1..100] of integer;	cx1, cy1, cx2, cy2, cx3, cy3, cx4, cy4, cx5, cy5, cx6, cy6, cx7, cy7, cx8, cy8, cx12, cy12, cx20, cy20: array [1..100] of real;	gMax, gRot, num, f1, pal, max, lj, pmasc1, pmasc2, pmalv, d1, d1n, jawbot, fishnum, pmslide: array [1..100] of real;		denttop, ljbot, dcorner, openlev, denttop2, pmalv2: array [1..100] of real;	d2to12, d7to11, d7to9, d6to11, d6to9, d8to9, d3to8, d1to3, d1to8, d4to11, d10to13, d4to9, d1to20, d1to19, d2to20, d1to9, d4to5, d3to4, d11to20, d9to20, d4to9n: array [1..100] of real;	A1, A2, A3, MAA1, MAA2, MAA3, MAopen, fixslope, yaxisfixang: array [1..100] of real;	maxangtop, maxangfront, maxangbot, openang, botang, angtip, cornerang, cornerangn: array [1..100] of real;	xoA1ins, yoA1ins, angA1fp, angA1inspal, f1inlevang, xoinlev, yoinlev, xocorner, yocorner, xncorner, yncorner: array [1..100] of real;	xnA1ins, ynA1ins, angA1fpn, angA1inspaln, f1inlevangn, xninlev, yninlev: array [1..100] of real;	angA2insert, angA3insert, xoA2ins, yoA2ins, xoA3ins, yoA3ins, xoslidept, yoslidept, xnslidept, ynslidept: array [1..100] of real;	angA2insertn, angA3insertn, xnA2ins, ynA2ins, xnA3ins, ynA3ins, xoslideptn, yoslideptn: array [1..100] of real;	ljangle, dentang, dentangn, maxKT1, maxKT2, gapeKT1, gapeKT2, protKT1, protKT2, snout, maxhead: array [1..100] of real;	gaper, gapep, gapeangr1, gapeangr2, gapeangp1, gapeangp2, protd, maxang1, maxang2, pmang, pmangn, protang: array [1..100] of real;	angmaxpal, angmaxpaln, angd1max, angd1nmax, VAopen, VAlinkage, KTsystem: array [1..100] of real;	angljf, angljfn, angpmalvpmasc, angpmalvpmascn: array [1..100] of real;	angpmascmax, angpmalvmax, angpmascmaxn, angpmalvmaxn: array [1..100] of real;	angf1d1, angd1pal, angf1d1n, angd1npal, angf1pal, angf1paln, angd1lj, angd1nlj: array [1..100] of real;	angpmpal, angpmpaln, angjawtip, angljtop: array [1..100] of real;	pmfp, pmfpn, angpmfpp, angpmfpf, angpmfppn, angpmfpfn: array [1..100] of real;	angpalpmfpn, angpmfpnf, angpmfpnpmasc, angpalpmascn: array [1..100] of real;	rangepm, jawmove, pmascn, side1: array [1..100] of real;	a, b, c, d, ang, tempang1, tempang2, tempang3, tempang1n, tempang2n, tempang3n: real;	newxside, newyside, xside, yside, newxsiden, newysiden, xsiden, ysiden:  array [1..100] of real;	xopm, yopm, xnpm, ynpm, xomp, yomp, xnmp, ynmp: array [1..100] of real;	xopmtop, yopmtop, xnpmtop, ynpmtop: array [1..100] of real;	xo, yo, xn, yn, xod, xnd, yod, ynd: array [1..100] of real;	xsidemax, xsidemaxn, ysidemax, ysidemaxn, maxangclosed, maxangopen, maxang3: array [1..100] of real;	palslope, tipslope, d8to9slope, angpmtip, angpmfix, pmslider, pseudopal, pseudomax, angpseudopal, angf1pmtip, angf1pmtop, angpmtop, angf1pseudopal: array [1..100] of real;	angpseudomaxpaln, angd1npseudomax, angd1npseudopal, angf1pseudopaln, maxslope, A1inslope: array [1..100] of real;	intfixdraw, intxod, intyod, intxo, intyo, intxomp, intyomp, intxopm, intyopm: INTEGER;	fixdraw, paldraw, maxdraw, ljdraw, d1draw, pmasc1draw, pmasc2draw, dist: real;	pmalvdraw, denttopdraw, ljbotdraw, dcornerdraw, pmfpdraw, d1ndraw, pmfpndraw, pmascndraw: real;	newxsidedraw, newysidedraw, newxsidendraw, newysidendraw, err : real;	dxp, dyp, dxq, dyq, dxod, dyod, dxo, dyo, dxomp, dyomp, dxopm, dyopm, dxopmtop, dyopmtop: INTEGER;	dxpn, dypn, dxqn, dyqn, dxnd, dynd, dxn, dyn, dxnmp, dynmp, dxnpm, dynpm, dxnpmtop, dynpmtop: INTEGER;	sidea, sideb, sidec, angab, angac, angbc, holdpeak, holdrot, holdslide: real;	i, fishcount, goodfile, h, holdi, xbase, ybase, rot, firsttime, eyedepth: INTEGER;	dxeye, dyeye, eye: INTEGER;	thefile, outfile1, outfile2, outfile3, outfile4, outfile5, outfile6, outfile7: text;	drawflag, post, post2, pmlow: char;	theReply: StandardFileReply;	circlerect, eyerect: rect;    out1Reply, out2Reply, out3Reply, out4Reply, out5Reply, out6Reply, out7Reply: sfReply;	{-------------Proc Declarations----------------}	Procedure ProcessData; Forward;	Procedure ClearScreen; Forward;	Procedure OpenFile; Forward;	Procedure HandleDialog; Forward;	Procedure TriangleCalc; Forward;	Procedure Magnify; Forward;	Procedure Reduce; Forward;	Procedure OpenCoordFile; Forward;	Procedure CalcLinksFromCoords; Forward;	Procedure RotateCoords; Forward;	Procedure ProtCoords; Forward;	Procedure SetDrawRawCoords; Forward;	Procedure SetDrawRotCoords; Forward;	Procedure SetDrawProtCoords; Forward;	Procedure MultRawCoords; Forward;	Procedure DrawRawCoords; Forward;	Procedure MultRotCoords; Forward;	Procedure DrawRotCoords; Forward;	Procedure MultProtCoords; Forward;	Procedure DrawProtCoords; Forward;	Procedure UnrotateNewCoords; Forward;	{------------------------------SaveData--------------------------------------------}procedure SaveData;		begin		if firsttime = 0 then	begin		out1Reply.fname := concat(theReply.sfFile.name, '.xls');		rewrite(outfile1, out1Reply.fname);		writeln(outfile1, '  Fishnum Specimen Num OpenMA A1MA A2MA A3MA MaxKT1 MaxKT2 GapeKT1 GapeKT2 ProtKT1 ProtKT2 VAlink KTsystem ProtDist ProtAng JawRot MaxRot1 MaxRot2 MaxHead GapeInit GapeOpen GapeAng1 GapeAng2 GapeAngOpen1 GapeAngOpen2'); 		firsttime:= 1;	end;		writeln(outfile1, fishnum[i]:4:0, spec[i]:10, num[i]:8:0, MAopen[i]:8:2, MAA1[i]:8:2, MAA2[i]:8:2, MAA3[i]:8:2, maxKT1[i]:8:3, maxKT2[i]:8:3, gapeKT1[i]:8:3, gapeKT2[i]:8:3, protKT1[i]:8:3, protKT2[i]:8:3, VAlinkage[i]:8:3, KTsystem[i]:8:3, protd[i]:8:3, protang[i]:8:3, gRot[i]:8:0, maxang1[i]:8:3, maxang2[i]:8:3, maxhead[i]:8:3, gaper[i]:8:3, gapep[i]:8:3, gapeangr1[i]:8:3, gapeangr2[i]:8:3, gapeangp1[i]:8:3, gapeangp2[i]:8:3);	end;		{__________________________Number Procs and Functions_______________________________} procedure SetDString (TheDialog: DialogPtr; item: integer; str: str255);		var			ItemType: integer;			ItemBox: rect;			ItemHdl: handle;	begin		GetDialogItem(TheDialog, item, ItemType, ItemHdl, ItemBox);		SetDialogItemText(ItemHdl, str)	end; function GetDString (TheDialog: DialogPtr; item: integer): str255;		var			ItemType: integer;			ItemBox: rect;			ItemHdl: handle;			str: str255;	begin		GetDialogItem(TheDialog, item, ItemType, ItemHdl, ItemBox);		GetDialogItemText(ItemHdl, str);		GetDString := str;	end;	procedure RealToString (Val: extended; width, fwidth: integer; var Str: Str255);  {Does number to string conversion equivalent to write(val:width:fwidth).}  var	begin		if width<1 then width:=1;		if (fwidth<0) or (fwidth>8) then fwidth:=0;		str:=StringOf(val:width:fwidth);	end;		procedure SetDReal (MyDialog: DialogPtr; item: integer; n: extended; fwidth: integer);		var			ItemType: integer;			ItemBox: rect;			ItemHdl: handle;			str: str255;	begin		GetDialogItem(MyDialog, item, ItemType, ItemHdl, ItemBox);		RealToString(n, 1, fwidth, str);		SetDialogItemText(ItemHdl, str);	end;	function StringToReal (str: str255): extended;		var			k, ndigits, StringLength: integer;			c: char;			n, m: extended;			negative, LeftOfPoint, NegExp: boolean;			exponent: LongInt;	begin		negative := false;		n := 0.0;		LeftOfPoint := true;		m := 0.1;		ndigits := 0;		StringLength := length(str);		k := 0;		repeat			k := k + 1;		until (str[k] in ['0'..'9', '-', '.']) or (k >= StringLength);		c := str[k];		repeat			if c = '-' then				negative := true			else if c = '.' then				LeftOfPoint := false			else if (c >= '0') and (c <= '9') then begin					ndigits := ndigits + 1;					if LeftOfPoint then						n := n * 10.0 + ord(c) - ord('0')					else begin							n := n + (ord(c) - ord('0')) * m;							m := m * 0.1;						end;				end;			k := k + 1;			if k <= StringLength then				c := str[k];		until not (c in ['0'..'9', '-', '.']) or (k > StringLength);		if (c = 'e') or (c = 'E') then begin				NegExp := false;				exponent := 0;				k := k + 1;				if k <= StringLength then					c := str[k];				if (c = '+') or (c = '-') then begin						if c = '-' then							NegExp := true;						k := k + 1;						if k <= StringLength then							c := str[k];					end;				repeat					if (c >= '0') and (c <= '9') then						exponent := exponent * 10 + ord(c) - ord('0');					k := k + 1;					if k <= StringLength then						c := str[k];				until not (c in ['0'..'9']) or (k > StringLength);				if negExp then					exponent := -exponent;				if exponent <> 0 then					n := n * exp(exponent * ln(10));			end; {if c='e'}		if ndigits = 0 then			n := 0  {was called BadReal}		else if negative then			n := -n;		StringToReal := n;	end;		function GetDReal (TheDialog: DialogPtr; item: integer): extended;		var			str: str255;	begin		str := GetDString(TheDialog, item);		GetDReal := StringToReal(str);	end;					{-------------------------------ShowError---------------------------------------------}	procedure ShowError;		const			OKID = 2;			ErrID =3;		var			errDialog: DialogPtr;			item: integer;			dummy:real;		begin		if errnum = 1 then errDialog := GetNewDialog(131, nil, pointer(-1));		if errnum = 2 then errDialog := GetNewDialog(132, nil, pointer(-1));		if errnum = 3 then errDialog := GetNewDialog(133, nil, pointer(-1));		if errnum = 4 then errDialog := GetNewDialog(134, nil, pointer(-1));		if errnum = 5 then errDialog := GetNewDialog(135, nil, pointer(-1));		if errnum = 6 then errDialog := GetNewDialog(136, nil, pointer(-1));		if errnum = 7 then errDialog := GetNewDialog(137, nil, pointer(-1));		if errnum = 8 then errDialog := GetNewDialog(138, nil, pointer(-1));		if errnum = 9 then errDialog := GetNewDialog(139, nil, pointer(-1));		if errnum = 10 then errDialog := GetNewDialog(140, nil, pointer(-1));		if errnum = 11 then errDialog := GetNewDialog(141, nil, pointer(-1));		if errnum = 12 then errDialog := GetNewDialog(142, nil, pointer(-1));		if errnum = 13 then errDialog := GetNewDialog(143, nil, pointer(-1));		if errnum = 14 then errDialog := GetNewDialog(144, nil, pointer(-1));		if errnum = 15 then errDialog := GetNewDialog(145, nil, pointer(-1));		if errnum = 16 then errDialog := GetNewDialog(146, nil, pointer(-1));		if errnum = 17 then errDialog := GetNewDialog(147, nil, pointer(-1));		if errnum = 18 then errDialog := GetNewDialog(148, nil, pointer(-1));		if errnum = 19 then errDialog := GetNewDialog(149, nil, pointer(-1));		if errnum = 20 then errDialog := GetNewDialog(150, nil, pointer(-1));		if errnum = 21 then errDialog := GetNewDialog(151, nil, pointer(-1));		if errnum = 22 then errDialog := GetNewDialog(152, nil, pointer(-1));		if errnum = 23 then errDialog := GetNewDialog(153, nil, pointer(-1));		if errnum = 24 then errDialog := GetNewDialog(154, nil, pointer(-1));		if errnum = 25 then errDialog := GetNewDialog(155, nil, pointer(-1));		if errnum = 26 then errDialog := GetNewDialog(156, nil, pointer(-1));		if errnum = 27 then errDialog := GetNewDialog(157, nil, pointer(-1));								ShowWindow(errDialog);				repeat				ModalDialog(nil, item);				until (item = OKID);				disposeDialog(errDialog);		end;{-------------------------------TriangleCalc---------------------------------------------}	procedure TriangleCalc;		var			check1, check2, check3: integer;			a, b, c, d, ang: real;	begin		if sidea > (sideb + sidec) then begin			ShowError;			err:= 1;			end;		if sideb > (sidea + sidec) then begin			ShowError;			err:= 1;			end;		if sidec > (sideb + sidea) then begin			ShowError;			err:= 1;			end;		check1 := 0;		check2 := 0;		check3 := 0;		if sqr(sidea) < (sqr(sideb) + sqr(sidec)) then			begin				a := sqr(sideb) + sqr(sidec) - sqr(sidea);				b := 2 * sideb * sidec;				ang := a / b;				c := 1 - sqr(ang);				angbc := arctan(sqrt(c) / ang) / (con);				check1 := 1;			end;		if sqr(sideb) < (sqr(sidea) + sqr(sidec)) then			begin				a := sqr(sidea) + sqr(sidec) - sqr(sideb);				b := 2 * sidea * sidec;				ang := a / b;				c := 1 - sqr(ang);				angac := arctan(sqrt(c) / ang) / (con);				check2 := 1;			end;		if sqr(sidec) < (sqr(sidea) + sqr(sideb)) then			begin				a := sqr(sidea) + sqr(sideb) - sqr(sidec);				b := 2 * sidea * sideb;				ang := a / b;				c := 1 - sqr(ang);				angab := arctan(sqrt(c) / ang) / (con);				check3 := 1;			end;		if (check1 = 0) then			angbc := 180 - (angab + angac);		if (check2 = 0) then			angac := 180 - (angab + angbc);		if (check3 = 0) then			angab := 180 - (angbc + angac);	end;	{-------------------------------Process Data---------------------------------------------}procedure ProcessData;	begin			if rx5[i] < rx11[i] then post:= 'y';		if rx5[i] >= rx11[i] then post:= 'n';				if rx6[i] < rx11[i] then post2:= 'y';		if rx6[i] >= rx11[i] then post2:= 'n';		{CALC LJ, MAX, D1: RETRACTED}		sidea:=f1[i];		sideb:=lj[i];		sidec:=d1[i];		errnum:=1;		trianglecalc;		angljf[i] := angab;		angf1d1[i] := angac;		angd1lj[i] := angbc;		if post = 'n' then xo[i] := lj[i] * sin(angljf[i] * con);		if post = 'y' then xo[i] := lj[i] * sin(angljf[i] * con) * -1;		yo[i] := lj[i] * cos(angljf[i] * con);		{CALC A2 INSERTION POINT: RETRACTED}		sidea:= f1[i];		sideb:=d6to11[i];		sidec:=d6to9[i];		errnum:=14;		trianglecalc;		angA2insert[i] := angab;		if post2 = 'n' then xoA2ins[i] := d6to11[i] * sin(angA2insert[i] * con);		if post2 = 'y' then xoA2ins[i] := d6to11[i] * sin(angA2insert[i] * con) * -1;		yoA2ins[i] := d6to11[i] * cos(angA2insert[i] * con);		{CALC A3 INSERTION POINT: RETRACTED}		sidea:= f1[i];		sideb:=d7to11[i];		sidec:=d7to9[i];		errnum:=15;		trianglecalc;		angA3insert[i] := angab;		xoA3ins[i] := d7to11[i] * sin(angA3insert[i] * con);		yoA3ins[i] := d7to11[i] * cos(angA3insert[i] * con);		{CALC ANGLES BETWEEN MAX, D1, AND PAL: RETRACTED}		sidea:=max[i];		sideb:=pal[i];		sidec:=d1[i];		errnum:=2;		trianglecalc;		angmaxpal[i] := angab;		angd1max[i] := angac;		angd1pal[i] := angbc;{CALC ANGLE FIX/PAL}		if post = 'n' then angf1pal[i] := angf1d1[i] + angd1pal[i];		if post = 'y' then angf1pal[i] := angd1pal[i] - angf1d1[i];		{CALC COORDINATES FOR MAX/PAL: RETRACTED}		xomp[i] := sin(angf1pal[i] * con) * pal[i];		yomp[i] := f1[i] - (cos(angf1pal[i] * con) * pal[i]);		{CALC PREMAX ANGLES AND COORDS: RETRACTED}		palslope[i]:= (ry9[i]-ry3[i])/(rx9[i]-rx3[i]);		tipslope[i]:= (ry9[i]-ry1[i])/(rx9[i]-rx1[i]);		d8to9slope[i]:= (ry9[i]-ry8[i])/(rx9[i]-rx8[i]);		sidea:=d1to9[i];		sideb:=d1[i];		sidec:=pmalv[i];		errnum:=3;		trianglecalc;		angpmtip[i]:= angab;		tempang1:= angac;		tempang2:= angbc;		angf1pmtip[i]:= angf1d1[i] + angpmtip[i];		xopm[i] := sin(angf1pmtip[i] * con) * d1to9[i];		yopm[i] := f1[i] - cos(angf1pmtip[i] * con) * d1to9[i];				sidea:=d8to9[i];		sideb:=d1to9[i];		sidec:=pmasc2[i];		errnum:=3;		trianglecalc;		angpmtop[i]:= angab;		angpmfix[i]:= angac;		tempang2:= angbc;		if palslope[i]<d8to9slope[i] then angf1pmtop[i]:= angf1pmtip[i] + angpmtop[i];		if palslope[i]>d8to9slope[i] then angf1pmtop[i]:= angf1pmtip[i] - angpmtop[i];		if palslope[i]=d8to9slope[i] then angf1pmtop[i]:= angf1pmtip[i];				xopmtop[i] := sin(angf1pmtop[i] * con) * d8to9[i];		yopmtop[i] := f1[i] - cos(angf1pmtop[i] * con) * d8to9[i];				pmslider[i]:= pmasc2[i]-pmasc1[i];		a := sqr(d8to9[i]) + sqr(pmslider[i]) - 2 * d8to9[i] * pmslider[i] * cos(angpmfix[i] * con);		pseudopal[i] := sqrt(a);		sidea:=d1to9[i];		sideb:=pseudopal[i];		sidec:=pmasc1[i];		errnum:=3;		trianglecalc;		angpseudopal[i]:= angab;		tempang1:= angac;		tempang2:= angbc;				angf1pseudopal[i]:= angf1pmtip[i] + angpseudopal[i];		xoslidept[i]:= sin(angf1pseudopal[i] * con) * pseudopal[i];		yoslidept[i] := f1[i] - cos(angf1pseudopal[i] * con) * pseudopal[i];		pseudomax[i]:= sqrt(sqr(xoslidept[i] - xo[i]) + sqr(yoslidept[i] - yo[i]));		{CALC A1 INSERTION POINT: RETRACTED}		maxslope[i]:= (ry5[i]-ry3[i])/(rx5[i]-rx3[i]);		A1inslope[i]:= (ry5[i]-ry4[i])/(rx5[i]-rx4[i]);		sidea:=max[i];		sideb:=d3to4[i];		sidec:=d4to5[i];		errnum:=25;		trianglecalc;		maxangtop[i] := angab;		maxangfront[i] := angbc;		maxangbot[i] := angac;		if maxslope[i] > A1inslope[i] then angA1inspal[i] := maxangtop[i] + angmaxpal[i];	{CALC A1ins/PAL ANGLE}		if maxslope[i] < A1inslope[i] then angA1inspal[i] := angmaxpal[i] - maxangtop[i];		sidea:=d4to9[i];								{CALC ANGLE A1ins/f1-PAL}		sideb:=pal[i];		sidec:=d3to4[i];		errnum:=17;		trianglecalc;		angA1fp[i] := angf1pal[i]-angab;				xoA1ins[i] := sin(angA1fp[i] * con) * d4to9[i];	{CALC A1ins COORDINATES}		yoA1ins[i] := f1[i] - cos(angA1fp[i] * con) * d4to9[i];		{CALC JAW ANGLES: Upper Part Retracted}		sidea:=lj[i];		sideb:=ljbot[i];		sidec:=denttop[i];		errnum:=5;		trianglecalc;		ljangle[i] := angab;		angjawtip[i] := angbc;		angljtop[i] := angac;{CALC FIX/LJBOT ANGLE}		if post = 'n' then dentang[i] := ljangle[i] + angljf[i];		if post = 'y' then dentang[i] := ljangle[i] - angljf[i];		{COORDINATES OF DENTARY TIP}		xod[i] := sin(dentang[i] * con) * ljbot[i];		yod[i] := cos(dentang[i] * con) * ljbot[i];		{CALC JAW ANGLES: Lower Part Retracted}		sidea:=ljbot[i];		sideb:=openlev[i];		sidec:=jawbot[i];		errnum:=18;		trianglecalc;		openang[i] := angab;		botang[i] := angbc;		angtip[i] := angac;		if post = 'n' then f1inlevang[i]:= openang[i]+ljangle[i]+angljf[i];		if post = 'y' then f1inlevang[i]:= openang[i]+ljangle[i]-angljf[i];		xoinlev[i]:= sin(f1inlevang[i] * con) * openlev[i];		yoinlev[i]:= cos(f1inlevang[i] * con) * openlev[i];		{CALC Mouth Corner: Retracted}		sidea:=f1[i];		sideb:=d11to20[i];		sidec:=d9to20[i];		errnum:=19;		trianglecalc;		cornerang[i] := angab;		xocorner[i] := sin(cornerang[i] * con) * d11to20[i];		yocorner[i] := cos(cornerang[i] * con) * d11to20[i];		{CALC GAPE ANGLE1: RETRACTED}		sidea:=denttop[i];		sideb:=pmalv[i];		sidec:=gaper[i];		errnum:=6;		trianglecalc;		gapeangr1[i] := angab;		{CALC GAPE ANGLE2: RETRACTED}		sidea:=d1to20[i];		sideb:=d2to20[i];		sidec:=gaper[i];		errnum:=6;		trianglecalc;		gapeangr2[i] := angab;		{CALC ANGLE BETWEEN LJ AND F1: PROTRUDED}		if post = 'n' then angljfn[i] := angljf[i] + gRot[i];		if post = 'y' then angljfn[i] := gRot[i] - angljf[i];		if angljfn[i] >= 0 then post:= 'n';		if angljfn[i] < 0 then post:= 'y';{CALC NEW DIAGONAL: D1N}		a := sqr(lj[i]) + sqr(f1[i]) - 2 * lj[i] * f1[i] * cos(angljfn[i] * con);		d1n[i] := sqrt(a);		{CALC NEW ANGLES BETWEEN LJ, F1, AND D1: PROTRUDED}		sidea:=f1[i];		sideb:=lj[i];		sidec:=d1n[i];		errnum:=7;		trianglecalc;		angljfn[i] := angab;		angf1d1n[i] := angac;		angd1nlj[i] := angbc;{CALC X,Y COORDS FOR MAX/LJ: PROTRUDED}		if post = 'n' then xn[i] := sin(angljfn[i] * con) * lj[i];		if post = 'y' then xn[i] := sin(angljfn[i] * con) * lj[i] * -1;		yn[i] := cos(angljfn[i] * con) * lj[i];		cx5[i]:= xn[i] - xo[i];		cy5[i]:= yn[i] - yo[i];		{CALC A2 INSERTION POINT: PROTRUDED}		if post2 = 'n' then angA2insertn[i] := angA2insert[i] + gRot[i];		if post2 = 'y' then angA2insertn[i] := gRot[i] - angA2insert[i];		if angA2insertn[i] >= 0 then post2:= 'n';		if angA2insertn[i] < 0 then post2:= 'y';		angA2insertn[i]:= abs(angA2insertn[i]);		if post2 = 'n' then xnA2ins[i] := d6to11[i] * sin(angA2insertn[i] * con);		if post2 = 'y' then xnA2ins[i] := d6to11[i] * sin(angA2insertn[i] * con) * -1;		ynA2ins[i] := d6to11[i] * cos(angA2insertn[i] * con);		cx6[i]:= xnA2ins[i] - xoA2ins[i];		cy6[i]:= ynA2ins[i] - yoA2ins[i];		{CALC A3 INSERTION POINT: PROTRUDED}		angA3insertn[i] :=  angA3insert[i] + gRot[i];		xnA3ins[i] := d7to11[i] * sin(angA3insertn[i] * con);		ynA3ins[i] := d7to11[i] * cos(angA3insertn[i] * con);		cx7[i]:= xnA3ins[i] - xoA3ins[i];		cy7[i]:= ynA3ins[i] - yoA3ins[i];		{CALC NEW ANGLES BETWEEN MAX, D1, AND PAL: PROTRUDED}		sidea:=max[i];		sideb:=pal[i];		sidec:=d1n[i];		errnum:=8;		trianglecalc;		angmaxpaln[i] := angab;		angd1nmax[i] := angac;		angd1npal[i] := angbc;		{ADD TO GET NEW: F1/PAL}		if post = 'n' then angf1paln[i] := angf1d1n[i] + angd1npal[i];		if post = 'y' then angf1paln[i] := angd1npal[i] - angf1d1n[i];{CALC COORDINATES FOR MAX/PAL: PROTRUDED}		xnmp[i] := sin(angf1paln[i] * con) * pal[i];		ynmp[i] := f1[i] - cos(angf1paln[i] * con) * pal[i];		cx3[i]:= xnmp[i] - xomp[i];		cy3[i]:= ynmp[i] - yomp[i];		{CALC PMASCN}		rangepm[i] := pmslide[i]*(pmasc2[i] - pmasc1[i]);		jawmove[i] := gRot[i] / gMax[i];		pmascn[i] := pmasc1[i] + (rangepm[i] * jawmove[i]);		{CALC NEW ANGLES BETWEEN PseudoMAX, D1, AND PseudoPAL: PROTRUDED}		sidea:=pseudomax[i];		sideb:=pseudopal[i];		sidec:=d1n[i];		errnum:=8;		trianglecalc;		angpseudomaxpaln[i] := angab;		angd1npseudomax[i] := angac;		angd1npseudopal[i] := angbc;		{ADD TO GET NEW: F1/PseudoPAL}		if post = 'n' then angf1pseudopaln[i] := angf1d1n[i] + angd1npseudopal[i];		if post = 'y' then angf1pseudopaln[i] := angd1npseudopal[i] - angf1d1n[i];		xnslidept[i]:= sin(angf1pseudopaln[i] * con) * pseudopal[i];		ynslidept[i] := f1[i] - cos(angf1pseudopaln[i] * con) * pseudopal[i];		{CALC PREMAX ANGLES AND COORDS: PROTRUDED}		sidea:=pseudomax[i];		sideb:=pmalv[i];		sidec:=pmascn[i];		errnum:=9;		trianglecalc;		angpmalvmaxn[i] := angab;		angpmascmaxn[i] := angac;		angpmalvpmascn[i] := angbc;				angpmpaln[i] := angpmascmaxn[i] + angpseudomaxpaln[i];		a := sqr(pmascn[i]) + sqr(pseudopal[i]) - 2 * pmascn[i] * pseudopal[i] * cos(angpmpaln[i] * con);		pmfpn[i] := sqrt(a);									sidea:=pmfpn[i];										sideb:=pseudopal[i];		sidec:=pmascn[i];		errnum:=10;		trianglecalc;		angpmfppn[i] := angab;				if angpmpaln[i]<180 then								angpmfpfn[i] := angf1pseudopaln[i] - angpmfppn[i];		if angpmpaln[i]>180 then			angpmfpfn[i] := angf1pseudopaln[i] + angpmfppn[i];		if angpmpaln[i]=180 then			angpmfpfn[i] := angf1pseudopaln[i];		xnpm[i] := sin(angpmfpfn[i] * con) * pmfpn[i];			ynpm[i] := f1[i] - cos(angpmfpfn[i] * con) * pmfpn[i];		cx1[i]:= xnpm[i] - xopm[i];		cy1[i]:= ynpm[i] - yopm[i];						xsiden[i] := abs(xnpm[i] - xnslidept[i]);		ysiden[i] := abs(ynpm[i] - ynslidept[i]);				sidea:= xsiden[i];		sideb:= ysiden[i];		sidec:= pmascn[i];		errnum:=20;		trianglecalc;		tempang1n:= angab;		tempang2n:= angbc;		tempang3n:= angac;				newysiden[i] := pmasc2[i] * (sin(tempang3n * con) / sin(tempang1n * con));		newxsiden[i] := pmasc2[i] * (sin(tempang2n * con) / sin(tempang1n * con));		xnpmtop[i] := xnpm[i] - newxsiden[i];		ynpmtop[i] := ynpm[i] + newysiden[i];		cx8[i]:= xnpmtop[i] - xopmtop[i];		cy8[i]:= ynpmtop[i] - yopmtop[i];		{CALC A1 INSERTION POINT: PROTRUDED}		if maxslope[i] > A1inslope[i] then angA1inspaln[i] := maxangtop[i] + angmaxpaln[i];		if maxslope[i] < A1inslope[i] then angA1inspaln[i] := angmaxpaln[i] - maxangtop[i];		a := sqr(pal[i]) + sqr(d3to4[i]) - 2 * d3to4[i] * pal[i] * cos(angA1inspaln[i] * con);		d4to9n[i] := sqrt(a);		sidea:=d4to9n[i];		sideb:=pal[i];		sidec:=d3to4[i];		errnum:=21;		trianglecalc;		angA1fpn[i] := angf1paln[i]-angab;				xnA1ins[i] := sin(angA1fpn[i] * con) * d4to9n[i];	{CALC A1ins COORDINATES}		ynA1ins[i] := f1[i] - cos(angA1fpn[i] * con) * d4to9n[i];		cx4[i]:= xnA1ins[i] - xoA1ins[i];		cy4[i]:= ynA1ins[i] - yoA1ins[i];		{CALC DENTARY TIP COORDINATES: PROTRUDED}		dentangn[i] := dentang[i] + gRot[i];{NEW COORDINATES OF DENTARY TIP}		xnd[i] := sin(dentangn[i] * con) * (ljbot[i]);		ynd[i] := cos(dentangn[i] * con) * (ljbot[i]);		cx2[i]:= xnd[i] - xod[i];		cy2[i]:= ynd[i] - yod[i];		{CALC JAW ANGLES: Lower Part Protruded}		if post = 'n' then f1inlevangn[i]:= openang[i]+ljangle[i]+angljfn[i];		if post = 'y' then f1inlevangn[i]:= openang[i]+ljangle[i]-angljfn[i];		xninlev[i]:= sin(f1inlevangn[i] * con) * openlev[i];		yninlev[i]:= cos(f1inlevangn[i] * con) * openlev[i];		cx12[i]:= xninlev[i] - xoinlev[i];		cy12[i]:= yninlev[i] - yoinlev[i];		{CALC Mouth Corner: Protruded}		cornerangn[i] := cornerang[i] + gRot[i];		xncorner[i] := sin(cornerangn[i] * con) * d11to20[i];		yncorner[i] := cos(cornerangn[i] * con) * d11to20[i];		cx20[i]:= xncorner[i] - xocorner[i];		cy20[i]:= yncorner[i] - yocorner[i];		xncorner[i]:= xncorner[i] - (0.5*cx20[i]);		yncorner[i] := yncorner[i] - (0.5*cy20[i]);{CALC GAPE PROTRUDED}		a := sqr(abs(xnpm[i] - xnd[i])) + sqr(abs(ynpm[i] - ynd[i]));		gapep[i] := sqrt(a);{CALC GAPE ANGLE1: PROTRUDED}		sidea:=denttop[i];		sideb:=pmalv[i];		sidec:=gapep[i];		errnum:=11;		trianglecalc;		gapeangp1[i] := angab;		{CALC GAPE ANGLE2: PROTRUDED}		sidea:=sqrt(sqr(xnpm[i] - xncorner[i]) + sqr(ynpm[i] - yncorner[i]));		sideb:=sqrt(sqr(xnd[i] - xncorner[i]) + sqr(ynd[i] - yncorner[i]));		sidec:=gapep[i];		errnum:=22;		trianglecalc;		gapeangp2[i] := angab;		{CALC PROTRUSION DISTANCE}		a := sqr(xopm[i] - xnpm[i]) + sqr(yopm[i] - ynpm[i]);		protd[i] := sqrt(a);		{CALC Protrusion Angle}		if ynpm[i] > yopm[i] then 		begin			sidea:= protd[i];			sideb:= abs(ynpm[i] - yopm[i]);			sidec:= abs(xnpm[i] - xopm[i]);			errnum:=13;			trianglecalc;			protang[i] := angac;		end;				if ynpm[i] < yopm[i] then 		begin			sidea:= protd[i];			sideb:= abs(yopm[i] - ynpm[i]);			sidec:= abs(xnpm[i] - xopm[i]);			errnum:=13;			trianglecalc;			protang[i] := angac * (-1);		end;				if ynpm[i] = yopm[i] then protang[i] := 0;		{CALC ANGLE THROUGH WHICH MAX ROTATES}{CALC SIDE1 TRIANGLE}		a := sqr(abs(xn[i] - xo[i])) + sqr(abs(yn[i] - yo[i]));		side1[i] := sqrt(a);{CALC MAX ANGLE}		a := sqr(max[i]) + sqr(max[i]) - sqr(side1[i]);		b := 2 * max[i] * max[i];		c := a / b;		d := 1 - sqr(c);		maxang1[i] := arctan(sqrt(d) / c) / (con);				xsidemax[i]:= abs(xomp[i]-xo[i]);		ysidemax[i]:= abs(yomp[i]-yo[i]);		xsidemaxn[i]:= abs(xnmp[i]-xn[i]);		ysidemaxn[i]:= abs(ynmp[i]-yn[i]);				sidea:= xsidemax[i];		sideb:= ysidemax[i];		sidec:= max[i];		errnum:=23;		trianglecalc;		maxangclosed[i]:= angac;				sidea:= xsidemaxn[i];		sideb:= ysidemaxn[i];		sidec:= max[i];		errnum:=24;		trianglecalc;		maxangopen[i]:= angac;				if xnmp[i]>xn[i] then maxang2[i]:= maxangopen[i]-maxangclosed[i];		if xnmp[i]<xn[i] then maxang2[i]:= 180-maxangopen[i]-maxangclosed[i];		if xnmp[i]=xn[i] then maxang2[i]:= 90-maxangclosed[i];		{Calc Max Head Displacement}		maxhead[i]:= yomp[i]-ynmp[i];{CALC Kinematic Transmissions}		MAopen[i]:= openlev[i]/ljbot[i];		MAA1[i]:= d3to4[i]/d4to5[i];		MAA2[i]:= d6to11[i]/ljbot[i];		MAA3[i]:= d7to11[i]/ljbot[i];		VAopen[i]:= ljbot[i]/openlev[i];		VAlinkage[i]:= lj[i]/openlev[i];		maxKT1[i]:= maxang1[i]/gRot[i];		maxKT2[i]:= maxang2[i]/gRot[i];		protKT1[i]:= (100*(protd[i]/f1[i]))/gRot[i];		a := sqr(xopm[i]) + sqr(abs(f1[i] - yopm[i]));		snout[i] := sqrt(a);		protKT2[i]:=(100*(protd[i]/snout[i]))/gRot[i];		gapeKT1[i]:= (gapeangp1[i]-gapeangr1[i])/gRot[i];		gapeKT2[i]:= (gapeangp2[i]-gapeangr2[i])/gRot[i];		KTsystem[i]:= VAlinkage[i] * MaxKT2[i];end;	{-----------------------------Magnify-------------------------------}Procedure Magnify;	begin		if drawflag = 'o' then begin		mx1[i]:= mx1[i]*1.1;		mx2[i]:= mx2[i]*1.1;		mx3[i]:= mx3[i]*1.1;		mx4[i]:= mx4[i]*1.1;		mx5[i]:= mx5[i]*1.1;		mx6[i]:= mx6[i]*1.1;		mx7[i]:= mx7[i]*1.1;		mx8[i]:= mx8[i]*1.1;		mx9[i]:= mx9[i]*1.1;		mx10[i]:= mx10[i]*1.1;		mx11[i]:= mx11[i]*1.1;		mx12[i]:= mx12[i]*1.1;		mx13[i]:= mx13[i]*1.1;		mx14[i]:= mx14[i]*1.1;		mx15[i]:= mx15[i]*1.1;		mx16[i]:= mx16[i]*1.1;		mx17[i]:= mx17[i]*1.1;		mx18[i]:= mx18[i]*1.1;		mx19[i]:= mx19[i]*1.1;		mx20[i]:= mx20[i]*1.1;		my1[i]:= my1[i]*1.1;		my2[i]:= my2[i]*1.1;		my3[i]:= my3[i]*1.1;		my4[i]:= my4[i]*1.1;		my5[i]:= my5[i]*1.1;		my6[i]:= my6[i]*1.1;		my7[i]:= my7[i]*1.1;		my8[i]:= my8[i]*1.1;		my9[i]:= my9[i]*1.1;		my10[i]:= my10[i]*1.1;		my11[i]:= my11[i]*1.1;		my12[i]:= my12[i]*1.1;		my13[i]:= my13[i]*1.1;		my14[i]:= my14[i]*1.1;		my15[i]:= my15[i]*1.1;		my16[i]:= my16[i]*1.1;		my17[i]:= my17[i]*1.1;		my18[i]:= my18[i]*1.1;		my19[i]:= my19[i]*1.1;		my20[i]:= my20[i]*1.1;		ClearScreen;		DrawRawCoords;		end;				if drawflag = 'r' then begin		mrx1[i]:= mrx1[i]*1.1;		mrx2[i]:= mrx2[i]*1.1;		mrx3[i]:= mrx3[i]*1.1;		mrx4[i]:= mrx4[i]*1.1;		mrx5[i]:= mrx5[i]*1.1;		mrx6[i]:= mrx6[i]*1.1;		mrx7[i]:= mrx7[i]*1.1;		mrx8[i]:= mrx8[i]*1.1;		mrx9[i]:= mrx9[i]*1.1;		mrx10[i]:= mrx10[i]*1.1;		mrx11[i]:= mrx11[i]*1.1;		mrx12[i]:= mrx12[i]*1.1;		mrx13[i]:= mrx13[i]*1.1;		mrx14[i]:= mrx14[i]*1.1;		mrx15[i]:= mrx15[i]*1.1;		mrx16[i]:= mrx16[i]*1.1;		mrx17[i]:= mrx17[i]*1.1;		mrx18[i]:= mrx18[i]*1.1;		mrx19[i]:= mrx19[i]*1.1;		mrx20[i]:= mrx20[i]*1.1;		mry1[i]:= mry1[i]*1.1;		mry2[i]:= mry2[i]*1.1;		mry3[i]:= mry3[i]*1.1;		mry4[i]:= mry4[i]*1.1;		mry5[i]:= mry5[i]*1.1;		mry6[i]:= mry6[i]*1.1;		mry7[i]:= mry7[i]*1.1;		mry8[i]:= mry8[i]*1.1;		mry9[i]:= mry9[i]*1.1;		mry10[i]:= mry10[i]*1.1;		mry11[i]:= mry11[i]*1.1;		mry12[i]:= mry12[i]*1.1;		mry13[i]:= mry13[i]*1.1;		mry14[i]:= mry14[i]*1.1;		mry15[i]:= mry15[i]*1.1;		mry16[i]:= mry16[i]*1.1;		mry17[i]:= mry17[i]*1.1;		mry18[i]:= mry18[i]*1.1;		mry19[i]:= mry19[i]*1.1;		mry20[i]:= mry20[i]*1.1;		ClearScreen;		DrawRotCoords;		end;				if drawflag = 'n' then begin		mnx1[i]:= mnx1[i]*1.1;		mnx2[i]:= mnx2[i]*1.1;		mnx3[i]:= mnx3[i]*1.1;		mnx4[i]:= mnx4[i]*1.1;		mnx5[i]:= mnx5[i]*1.1;		mnx6[i]:= mnx6[i]*1.1;		mnx7[i]:= mnx7[i]*1.1;		mnx8[i]:= mnx8[i]*1.1;		mnx9[i]:= mnx9[i]*1.1;		mnx10[i]:= mnx10[i]*1.1;		mnx11[i]:= mnx11[i]*1.1;		mnx12[i]:= mnx12[i]*1.1;		mnx13[i]:= mnx13[i]*1.1;		mnx14[i]:= mnx14[i]*1.1;		mnx15[i]:= mnx15[i]*1.1;		mnx16[i]:= mnx16[i]*1.1;		mnx17[i]:= mnx17[i]*1.1;		mnx18[i]:= mnx18[i]*1.1;		mnx19[i]:= mnx19[i]*1.1;		mnx20[i]:= mnx20[i]*1.1;		mny1[i]:= mny1[i]*1.1;		mny2[i]:= mny2[i]*1.1;		mny3[i]:= mny3[i]*1.1;		mny4[i]:= mny4[i]*1.1;		mny5[i]:= mny5[i]*1.1;		mny6[i]:= mny6[i]*1.1;		mny7[i]:= mny7[i]*1.1;		mny8[i]:= mny8[i]*1.1;		mny9[i]:= mny9[i]*1.1;		mny10[i]:= mny10[i]*1.1;		mny11[i]:= mny11[i]*1.1;		mny12[i]:= mny12[i]*1.1;		mny13[i]:= mny13[i]*1.1;		mny14[i]:= mny14[i]*1.1;		mny15[i]:= mny15[i]*1.1;		mny16[i]:= mny16[i]*1.1;		mny17[i]:= mny17[i]*1.1;		mny18[i]:= mny18[i]*1.1;		mny19[i]:= mny19[i]*1.1;		mny20[i]:= mny20[i]*1.1;		ClearScreen;		DrawProtCoords;		end;	end;		{-----------------------------Reduce-------------------------------}Procedure Reduce;begin		if drawflag = 'o' then begin		mx1[i]:= mx1[i]*0.9;		mx2[i]:= mx2[i]*0.9;		mx3[i]:= mx3[i]*0.9;		mx4[i]:= mx4[i]*0.9;		mx5[i]:= mx5[i]*0.9;		mx6[i]:= mx6[i]*0.9;		mx7[i]:= mx7[i]*0.9;		mx8[i]:= mx8[i]*0.9;		mx9[i]:= mx9[i]*0.9;		mx10[i]:= mx10[i]*0.9;		mx11[i]:= mx11[i]*0.9;		mx12[i]:= mx12[i]*0.9;		mx13[i]:= mx13[i]*0.9;		mx14[i]:= mx14[i]*0.9;		mx15[i]:= mx15[i]*0.9;		mx16[i]:= mx16[i]*0.9;		mx17[i]:= mx17[i]*0.9;		mx18[i]:= mx18[i]*0.9;		mx19[i]:= mx19[i]*0.9;		mx20[i]:= mx20[i]*0.9;		my1[i]:= my1[i]*0.9;		my2[i]:= my2[i]*0.9;		my3[i]:= my3[i]*0.9;		my4[i]:= my4[i]*0.9;		my5[i]:= my5[i]*0.9;		my6[i]:= my6[i]*0.9;		my7[i]:= my7[i]*0.9;		my8[i]:= my8[i]*0.9;		my9[i]:= my9[i]*0.9;		my10[i]:= my10[i]*0.9;		my11[i]:= my11[i]*0.9;		my12[i]:= my12[i]*0.9;		my13[i]:= my13[i]*0.9;		my14[i]:= my14[i]*0.9;		my15[i]:= my15[i]*0.9;		my16[i]:= my16[i]*0.9;		my17[i]:= my17[i]*0.9;		my18[i]:= my18[i]*0.9;		my19[i]:= my19[i]*0.9;		my20[i]:= my20[i]*0.9;		ClearScreen;		DrawRawCoords;		end;				if drawflag = 'r' then begin		mrx1[i]:= mrx1[i]*0.9;		mrx2[i]:= mrx2[i]*0.9;		mrx3[i]:= mrx3[i]*0.9;		mrx4[i]:= mrx4[i]*0.9;		mrx5[i]:= mrx5[i]*0.9;		mrx6[i]:= mrx6[i]*0.9;		mrx7[i]:= mrx7[i]*0.9;		mrx8[i]:= mrx8[i]*0.9;		mrx9[i]:= mrx9[i]*0.9;		mrx10[i]:= mrx10[i]*0.9;		mrx11[i]:= mrx11[i]*0.9;		mrx12[i]:= mrx12[i]*0.9;		mrx13[i]:= mrx13[i]*0.9;		mrx14[i]:= mrx14[i]*0.9;		mrx15[i]:= mrx15[i]*0.9;		mrx16[i]:= mrx16[i]*0.9;		mrx17[i]:= mrx17[i]*0.9;		mrx18[i]:= mrx18[i]*0.9;		mrx19[i]:= mrx19[i]*0.9;		mrx20[i]:= mrx20[i]*0.9;		mry1[i]:= mry1[i]*0.9;		mry2[i]:= mry2[i]*0.9;		mry3[i]:= mry3[i]*0.9;		mry4[i]:= mry4[i]*0.9;		mry5[i]:= mry5[i]*0.9;		mry6[i]:= mry6[i]*0.9;		mry7[i]:= mry7[i]*0.9;		mry8[i]:= mry8[i]*0.9;		mry9[i]:= mry9[i]*0.9;		mry10[i]:= mry10[i]*0.9;		mry11[i]:= mry11[i]*0.9;		mry12[i]:= mry12[i]*0.9;		mry13[i]:= mry13[i]*0.9;		mry14[i]:= mry14[i]*0.9;		mry15[i]:= mry15[i]*0.9;		mry16[i]:= mry16[i]*0.9;		mry17[i]:= mry17[i]*0.9;		mry18[i]:= mry18[i]*0.9;		mry19[i]:= mry19[i]*0.9;		mry20[i]:= mry20[i]*0.9;		ClearScreen;		DrawRotCoords;		end;				if drawflag = 'n' then begin		mnx1[i]:= mnx1[i]*0.9;		mnx2[i]:= mnx2[i]*0.9;		mnx3[i]:= mnx3[i]*0.9;		mnx4[i]:= mnx4[i]*0.9;		mnx5[i]:= mnx5[i]*0.9;		mnx6[i]:= mnx6[i]*0.9;		mnx7[i]:= mnx7[i]*0.9;		mnx8[i]:= mnx8[i]*0.9;		mnx9[i]:= mnx9[i]*0.9;		mnx10[i]:= mnx10[i]*0.9;		mnx11[i]:= mnx11[i]*0.9;		mnx12[i]:= mnx12[i]*0.9;		mnx13[i]:= mnx13[i]*0.9;		mnx14[i]:= mnx14[i]*0.9;		mnx15[i]:= mnx15[i]*0.9;		mnx16[i]:= mnx16[i]*0.9;		mnx17[i]:= mnx17[i]*0.9;		mnx18[i]:= mnx18[i]*0.9;		mnx19[i]:= mnx19[i]*0.9;		mnx20[i]:= mnx20[i]*0.9;		mny1[i]:= mny1[i]*0.9;		mny2[i]:= mny2[i]*0.9;		mny3[i]:= mny3[i]*0.9;		mny4[i]:= mny4[i]*0.9;		mny5[i]:= mny5[i]*0.9;		mny6[i]:= mny6[i]*0.9;		mny7[i]:= mny7[i]*0.9;		mny8[i]:= mny8[i]*0.9;		mny9[i]:= mny9[i]*0.9;		mny10[i]:= mny10[i]*0.9;		mny11[i]:= mny11[i]*0.9;		mny12[i]:= mny12[i]*0.9;		mny13[i]:= mny13[i]*0.9;		mny14[i]:= mny14[i]*0.9;		mny15[i]:= mny15[i]*0.9;		mny16[i]:= mny16[i]*0.9;		mny17[i]:= mny17[i]*0.9;		mny18[i]:= mny18[i]*0.9;		mny19[i]:= mny19[i]*0.9;		mny20[i]:= mny20[i]*0.9;		ClearScreen;		DrawProtCoords;		end;	end;{---------------------------------HandleDialog------------------------------------}		procedure HandleDialog;		const			SpecimenID =39;			MaxJawRotID = 2;			JawRotID = 4;			NumID = 37;			F1ID = 6;			PalID = 8;			MaxID = 10;			LJID = 12;			D1ID = 14;			Pmasc1ID = 16;			Pmasc2ID = 18;			PmalvID = 20;			DenttopID = 22;			LJbotID = 24;			JcorID = 26;			OpenlevID = 138;			PMSlideID =77;			A1ID = 79;			A2ID = 81;			A3ID = 82;			A1inlevID = 91;			A2inlevID = 92;			A3inlevID = 93;			SetPeakID = 94;			SetRotID = 96;			SetProtID = 83;			XdirID = 97;						AnalyzeID = 27;			SaveID = 28;			QuitID = 29;			NextFishID = 30;			PrevFishID = 33;			FishnumID = 31;			OpenID = 34;			OpenCoordID = 142;			SaveNewCoordsID = 35;			SimAllMaxID = 135;			SimAllRangeID =136;			DrawRawID = 40;			SaveRevDataID = 134;			DrawClosedID = 114;			DrawOpenID = 115;			MagnifyID = 116;			ReduceID = 117;			ClearID = 118;			OpenMoreID = 119;			CloseMoreID = 120;			RotationID = 122;						MAopenID = 60;			MAA1ID = 76;			MAA2ID = 78;			MAA3ID = 80;			VAopenID = 52;			VAlinkageID = 53;			KTsystemID = 139;			MaxRot1ID = 54;			MaxRot2ID = 124;			MaxHeadID = 141;			GapeCID = 55;			GapeOID = 56;			GapeAng1CID= 65;			GapeAng1OID= 66;			GapeAng2CID= 84;			GapeAng2OID= 88;			ProtDID = 57;			MaxKT1ID =58;			MaxKT2ID = 126;			GapeKTID = 59;			GapeKT2ID = 87;			ProtKT1ID = 131;			ProtKT2ID = 133;			ProtAngID = 113;						xopmID = 97;			yopmID = 98;			pseudomaxID = 107;			pseudopalID = 105;					var			myDialog: DialogPtr;			item: integer;			holdRot, dummy:real;			holdgRot:real;			myrect:rect;					begin				myDialog := GetNewDialog(128, nil, pointer(-1));				ShowWindow(myDialog);				{setrect(myrect,450,100,1000,1000);}				setrect(myrect,350,40,1200,700);				setport(myDialog);								repeat					ModalDialog(nil, item);					if item = MaxJawRotID then if fishok[i]=1 then						gMax[i] := GetDReal(myDialog, MaxJawRotID);					if item = JawRotID then if fishok[i]=1 then						gRot[i] := GetDReal(myDialog, JawRotID);					if item = F1ID then if fishok[i]=1 then						f1[i] := GetDReal(myDialog, F1ID);					if item = PalID then if fishok[i]=1 then						pal[i] := GetDReal(myDialog, PalID);					if item = MaxID then if fishok[i]=1 then						max[i] := GetDReal(myDialog, MaxID);					if item = LJID then if fishok[i]=1 then						lj[i] := GetDReal(myDialog, LJID);					if item = D1ID then if fishok[i]=1 then						d1[i] := GetDReal(myDialog, D1ID);					if item = Pmasc1ID then if fishok[i]=1 then						pmasc1[i] := GetDReal(myDialog, Pmasc1ID);					if item = Pmasc2ID then if fishok[i]=1 then						pmasc2[i] := GetDReal(myDialog, Pmasc2ID);					if item = PmalvID then if fishok[i]=1 then						pmalv[i] := GetDReal(myDialog, PmalvID);					if item = DenttopID then if fishok[i]=1 then						denttop[i] := GetDReal(myDialog, DenttopID);					if item = LJbotID then if fishok[i]=1 then						ljbot[i] := GetDReal(myDialog, LJbotID);					if item = JcorID then if fishok[i]=1 then						dcorner[i] := GetDReal(myDialog, JcorID);					if item = OpenlevID then if fishok[i]=1 then						openlev[i] := GetDReal(myDialog, OpenlevID);					if item = FishNumID then if fishok[i]=1 then						fishnum[i] := GetDReal(myDialog, FishNumID);					if item = PMSlideID then if fishok[i]=1 then						pmslide[i] := GetDReal(myDialog, PMSlideID);					if item = A1ID then if fishok[i]=1 then						A1[i] := GetDReal(myDialog, A1ID);					if item = A2ID then if fishok[i]=1 then						A2[i] := GetDReal(myDialog, A2ID);					if item = A3ID then if fishok[i]=1 then						A3[i] := GetDReal(myDialog, A3ID);					if item = SetPeakID then if fishok[i]=1 then						begin							gMax[i] := GetDReal(myDialog, SetPeakID);							SetDReal(myDialog, MaxJawRotID, gMax[i], 2);							holdPeak:= gMax[i];							holdi:=i;							i:=0;							repeat								i:=i+1;								gMax[i] := holdpeak;							until i=fishcount;							i:=holdi;						end;					if item = SetRotID then if fishok[i]=1 then						begin							gRot[i] := GetDReal(myDialog, SetRotID);							SetDReal(myDialog, JawRotID, gRot[i], 2);							holdRot:= gRot[i];							holdi:=i;							i:=0;							repeat								i:=i+1;								gRot[i] := holdRot;							until i=fishcount;							i:=holdi;						end;											if item = SetProtID then if fishok[i]=1 then						begin							pmslide[i] := GetDReal(myDialog, SetProtID);							SetDReal(myDialog, PMSlideID, pmslide[i], 2);							holdslide:= pmslide[i];							holdi:=i;							i:=0;							repeat								i:=i+1;								pmslide[i] := holdslide;							until i=fishcount;							i:=holdi;						end;											if item = OpenCoordID then 						begin							OpenCoordFile;							i:=0;							repeat								begin									i:=i+1;									gMax[i]:=30;									gRot[i]:=30;									pmslide[i]:= 0.5;									if fishok[i]=1 then CalcLinksFromCoords;										if fishok[i]=1 then SetDrawRawCoords;									dist:=0;									if fishok[i]=1 then repeat										MultRawCoords;										dist:= sqrt(sqr(mx11[i]-mx19[i])+sqr(my11[i]-my19[i]));									until dist>= 300;																		if fishok[i]=1 then RotateCoords;									if fishok[i]=1 then SetDrawRotCoords;									dist:=0;									if fishok[i]=1 then repeat										MultRotCoords;										dist:= sqrt(sqr(mrx11[i]-mrx19[i])+sqr(mry11[i]-mry19[i]));									until dist>= 300;								end;							until i=fishcount;								i:=1;							if fishok[i]=1 then DrawRotCoords;							SetDReal(myDialog, MaxJawRotID, gMax[i], 2);							SetDReal(myDialog, JawRotID, gRot[i], 2);							SetDReal(myDialog, NumID, num[i], 2);							SetDReal(myDialog, F1ID, f1[i], 2);							SetDReal(myDialog, PalID, pal[i], 2);							SetDReal(myDialog, MaxID, max[i], 2);							SetDReal(myDialog, LJID, lj[i], 2);							SetDReal(myDialog, D1ID, d1[i], 2);							SetDReal(myDialog, Pmasc1ID, pmasc1[i], 2);							SetDReal(myDialog, Pmasc2ID, pmasc2[i], 2);							SetDReal(myDialog, PmalvID, pmalv[i], 2);							SetDReal(myDialog, DenttopID, denttop[i], 2);							SetDReal(myDialog, LJbotID, ljbot[i], 2);							SetDReal(myDialog, JcorID, dcorner[i], 2);							SetDReal(myDialog, OpenlevID, openlev[i], 2);							SetDReal(myDialog, FishnumID, fishnum[i], 2);							SetDString(myDialog, SpecimenID, spec[i]);							SetDReal(myDialog, PMSlideID, pmslide[i],2);							SetDReal(myDialog, A1ID, A1[i],2);							SetDReal(myDialog, A2ID, A2[i],2);							SetDReal(myDialog, A3ID, A3[i],2);							SetDReal(myDialog, A1inlevID, d3to4[i],2);							SetDReal(myDialog, A2inlevID, d6to11[i],2);							SetDReal(myDialog, A3inlevID, d7to11[i],2);							SetDReal(myDialog, SetPeakID, gMax[i], 2);							SetDReal(myDialog, SetRotID, gRot[i], 2);							SetDReal(myDialog, SetProtID, pmslide[i], 2);						end;											if item = AnalyzeID then if fishok[i]=1 then					begin						err:=0;						ProcessData;						if err=1 then						begin							errnum:=27;							ShowError;							repeat 								err:=0;								gRot[i]:= gRot[i]-1;								ProcessData;								if gRot[i]=0 then err:=0;							until err=0;							SetDReal(myDialog, JawRotID, gRot[i], 2);						end;												ProtCoords;						UnrotateNewCoords;						ClearScreen;						SetDrawProtCoords;						dist:=0;						repeat							MultProtCoords;							dist:= sqrt(sqr(mnx11[i]-mnx19[i])+sqr(mny11[i]-mny19[i]));						until dist>= 300;						DrawProtCoords;						SetDReal(myDialog, MAopenID, MAopen[i], 2);						SetDReal(myDialog, MAA1ID, MAA1[i], 2);						SetDReal(myDialog, MAA2ID, MAA2[i], 2);						SetDReal(myDialog, MAA3ID, MAA3[i], 2);						SetDReal(myDialog, VAopenID, VAopen[i], 2);						SetDReal(myDialog, VAlinkageID, VAlinkage[i], 2);						SetDReal(myDialog, KTsystemID, KTsystem[i], 2);						SetDReal(myDialog, MaxRot1ID, maxang1[i], 2);						SetDReal(myDialog, MaxRot2ID, maxang2[i], 2);						SetDReal(myDialog, MaxHeadID, maxhead[i], 2);						SetDReal(myDialog, GapeCID, gaper[i], 2);						SetDReal(myDialog, GapeOID, gapep[i], 2);						SetDReal(myDialog, GapeAng1CID, gapeangr1[i], 2);						SetDReal(myDialog, GapeAng1OID, gapeangp1[i], 2);						SetDReal(myDialog, GapeAng2CID, gapeangr2[i], 2);						SetDReal(myDialog, GapeAng2OID, gapeangp2[i], 2);						SetDReal(myDialog, ProtDID, protd[i], 2);						SetDReal(myDialog, MaxKT1ID, maxKT1[i], 2);						SetDReal(myDialog, MaxKT2ID, maxKT2[i], 2);						SetDReal(myDialog, GapeKTID, gapeKT1[i], 2);						SetDReal(myDialog, GapeKT2ID, gapeKT2[i], 2);						SetDReal(myDialog, ProtKT1ID, protKT1[i], 3);						SetDReal(myDialog, ProtKT2ID, protKT2[i], 3);						SetDReal(myDialog, ProtAngID, protang[i], 3);												SetDReal(myDialog, xopmID, xopm[i], 3);						SetDReal(myDialog, yopmID, yopm[i], 3);						SetDReal(myDialog, pseudomaxID, pseudomax[i], 3);						SetDReal(myDialog, pseudopalID, pseudopal[i], 3);					end;										if item = DrawRawID then if fishok[i]=1 then					begin						ClearScreen;						DrawRawCoords;					end;										if item = DrawClosedID then if fishok[i]=1 then					begin						ClearScreen;						DrawRotCoords;					end;										if item = DrawOpenID then if fishok[i]=1 then					begin						ClearScreen;						ProcessData;						ProtCoords;						UnrotateNewCoords;						SetDrawProtCoords;						dist:=0;						repeat							MultProtCoords;							dist:= sqrt(sqr(mnx11[i]-mnx19[i])+sqr(mny11[i]-mny19[i]));						until dist>= 300;						DrawProtCoords;					end;										if item = MagnifyID then if fishok[i]=1 then						begin						Magnify;						eraserect(myrect);						if drawflag = 'o' then DrawRawCoords;						if drawflag = 'r' then DrawRotCoords;						if drawflag = 'n' then DrawProtCoords;						end;											if item = ReduceID then if fishok[i]=1 then						begin						Reduce;						eraserect(myrect);						if drawflag = 'o' then DrawRawCoords;						if drawflag = 'r' then DrawRotCoords;						if drawflag = 'n' then DrawProtCoords;						end;											if item = ClearID then if fishok[i]=1 then						begin							ClearScreen;						end;											if item = OpenMoreID then if fishok[i]=1 then						begin							gRot[i]:= gRot[i]+1;							SetDReal(myDialog, JawRotID, gRot[i], 2);							ClearScreen;							ProcessData;							if err=1 then								begin									errnum:=27;									ShowError;									repeat 										err:=0;										gRot[i]:= gRot[i]-1;										ProcessData;										if gRot[i]=0 then err:=0;									until err=0;								end;							ProtCoords;							UnrotateNewCoords;							SetDrawProtCoords;							dist:=0;							repeat								MultProtCoords;								dist:= sqrt(sqr(mnx11[i]-mnx19[i])+sqr(mny11[i]-mny19[i]));							until dist>= 300;							DrawProtCoords;						end;											if item = CloseMoreID then if fishok[i]=1 then						begin							gRot[i]:= gRot[i]-1;							SetDReal(myDialog, JawRotID, gRot[i], 2);							ClearScreen;							ProcessData;							if err=1 then								begin									errnum:=27;									ShowError;									repeat 										err:=0;										gRot[i]:= gRot[i]+1;										ProcessData;										if gRot[i]=0 then err:=0;									until err=0;								end;							ProtCoords;							UnrotateNewCoords;							SetDrawProtCoords;							dist:=0;							repeat								MultProtCoords;								dist:= sqrt(sqr(mnx11[i]-mnx19[i])+sqr(mny11[i]-mny19[i]));							until dist>= 300;							DrawProtCoords;						end;											if item = SaveID then if fishok[i]=1 then SaveData;										if item = NextFishID then						begin							if (i<fishcount) then							begin							i:= i+1;							err:=0;							ClearScreen;							if fishok[i]=1 then DrawRotCoords;							SetDReal(myDialog, MaxJawRotID, gMax[i], 2);							SetDReal(myDialog, JawRotID, gRot[i], 2);							SetDReal(myDialog, NumID, num[i], 2);							SetDReal(myDialog, F1ID, f1[i], 2);							SetDReal(myDialog, PalID, pal[i], 2);							SetDReal(myDialog, MaxID, max[i], 2);							SetDReal(myDialog, LJID, lj[i], 2);							SetDReal(myDialog, D1ID, d1[i], 2);							SetDReal(myDialog, Pmasc1ID, pmasc1[i], 2);							SetDReal(myDialog, Pmasc2ID, pmasc2[i], 2);							SetDReal(myDialog, PmalvID, pmalv[i], 2);							SetDReal(myDialog, DenttopID, denttop[i], 2);							SetDReal(myDialog, LJbotID, ljbot[i], 2);							SetDReal(myDialog, JcorID, dcorner[i], 2);							SetDReal(myDialog, OpenlevID, openlev[i], 2);							SetDReal(myDialog, FishnumID, fishnum[i], 2);							SetDString(myDialog, SpecimenID, spec[i]);							SetDReal(myDialog, PMSlideID, pmslide[i],2);							SetDReal(myDialog, A1ID, A1[i],2);							SetDReal(myDialog, A2ID, A2[i],2);							SetDReal(myDialog, A3ID, A3[i],2);							SetDReal(myDialog, A1inlevID, d3to4[i],2);							SetDReal(myDialog, A2inlevID, d6to11[i],2);							SetDReal(myDialog, A3inlevID, d7to11[i],2);							SetDReal(myDialog, SetPeakID, gMax[i], 2);							SetDReal(myDialog, SetRotID, gRot[i], 2);							SetDReal(myDialog, SetProtID, pmslide[i], 2);							end;						end;											if item = PrevFishID then						begin							if (i>1) then							begin							i:= i-1;							err:=0;							ClearScreen;							 if fishok[i]=1 then DrawRotCoords;							SetDReal(myDialog, MaxJawRotID, gMax[i], 2);							SetDReal(myDialog, JawRotID, gRot[i], 2);							SetDReal(myDialog, NumID, num[i], 2);							SetDReal(myDialog, F1ID, f1[i], 2);							SetDReal(myDialog, PalID, pal[i], 2);							SetDReal(myDialog, MaxID, max[i], 2);							SetDReal(myDialog, LJID, lj[i], 2);							SetDReal(myDialog, D1ID, d1[i], 2);							SetDReal(myDialog, Pmasc1ID, pmasc1[i], 2);							SetDReal(myDialog, Pmasc2ID, pmasc2[i], 2);							SetDReal(myDialog, PmalvID, pmalv[i], 2);							SetDReal(myDialog, DenttopID, denttop[i], 2);							SetDReal(myDialog, LJbotID, ljbot[i], 2);							SetDReal(myDialog, JcorID, dcorner[i], 2);							SetDReal(myDialog, OpenlevID, openlev[i], 2);							SetDReal(myDialog, FishnumID, fishnum[i], 2);							SetDString(myDialog, SpecimenID, spec[i]);							SetDReal(myDialog, PMSlideID, pmslide[i],2);							SetDReal(myDialog, A1ID, A1[i],2);							SetDReal(myDialog, A2ID, A2[i],2);							SetDReal(myDialog, A3ID, A3[i],2);							SetDReal(myDialog, A1inlevID, d3to4[i],2);							SetDReal(myDialog, A2inlevID, d6to11[i],2);							SetDReal(myDialog, A3inlevID, d7to11[i],2);							SetDReal(myDialog, SetPeakID, gMax[i], 2);							SetDReal(myDialog, SetRotID, gRot[i], 2);							SetDReal(myDialog, SetProtID, pmslide[i], 2);							end;						end;											{if item = SimulateID then						begin							holdRot:= gRot[i];							gRot[i]:=0;							repeat								begin									gRot[i]:= gRot[i]+1;									ProcessData;									SaveData;								end;							until gRot[i] >= gMax[i];							gRot[i]:=holdRot;						end;}											if item = SimAllMaxID then if fishok[i]=1 then						begin							out3Reply.fname := concat(theReply.sfFile.name, '.MaxAll');							rewrite(outfile3, out3Reply.fname);							writeln(outfile3, '  Fishnum Specimen Num OpenMA A1MA A2MA A3MA MaxKT1 MaxKT2 GapeKT1 GapeKT2 ProtKT1 ProtKT2 VAlink KTsystem ProtDist ProtAng JawRot MaxRot1 MaxRot2 MaxHead GapeInit GapeOpen GapeAng1 GapeAng2 GapeAngOpen1 GapeAngOpen2'); 							holdi:= i;							i:=0;							repeat								begin								i:=I+1;								gRot[i] := gMax[i];								ProcessData;								writeln(outfile3, fishnum[i]:4:0, spec[i]:10, num[i]:8:0, MAopen[i]:8:2, MAA1[i]:8:2, MAA2[i]:8:2, MAA3[i]:8:2, maxKT1[i]:8:3, maxKT2[i]:8:3, gapeKT1[i]:8:3, gapeKT2[i]:8:3, protKT1[i]:8:3, protKT2[i]:8:3, VAlinkage[i]:8:3, KTsystem[i]:8:3, protd[i]:8:3, protang[i]:8:3, gRot[i]:8:0, maxang1[i]:8:3, maxang2[i]:8:3, maxhead[i]:8:3, gaper[i]:8:3, gapep[i]:8:3, gapeangr1[i]:8:3, gapeangr2[i]:8:3, gapeangp1[i]:8:3, gapeangp2[i]:8:3);								end;							until i = fishcount;							close(outfile3);							i:= holdi;						end;											if item = SimAllRangeID then if fishok[i]=1 then						begin							out4Reply.fname := concat(theReply.sfFile.name, '.RangeAll');							rewrite(outfile4, out4Reply.fname);							writeln(outfile4, '  Fishnum Specimen Num OpenMA A1MA A2MA A3MA MaxKT1 MaxKT2 GapeKT1 GapeKT2 ProtKT1 ProtKT2 VAlink KTsystem ProtDist ProtAng JawRot MaxRot1 MaxRot2 MaxHead GapeInit GapeOpen GapeAng1 GapeAng2 GapeAngOpen1 GapeAngOpen2'); 							holdi:= i;							i:=0;							repeat								begin									i:=I+1;									gRot[i] := 0;									repeat									begin									gRot[i]:= gRot[i]+1;									ProcessData;									writeln(outfile4, fishnum[i]:4:0, spec[i]:10, num[i]:8:0, MAopen[i]:8:2, MAA1[i]:8:2, MAA2[i]:8:2, MAA3[i]:8:2, maxKT1[i]:8:3, maxKT2[i]:8:3, gapeKT1[i]:8:3, gapeKT2[i]:8:3, protKT1[i]:8:3, protKT2[i]:8:3, VAlinkage[i]:8:3, KTsystem[i]:8:3, protd[i]:8:3, protang[i]:8:3, gRot[i]:8:0, maxang1[i]:8:3, maxang2[i]:8:3, maxhead[i]:8:3, gaper[i]:8:3, gapep[i]:8:3, gapeangr1[i]:8:3, gapeangr2[i]:8:3, gapeangp1[i]:8:3, gapeangp2[i]:8:3);								end;								until  gRot[i] >= gMax[i];							end;							until i = fishcount;						close(outfile4);						i:= holdi;					end;										if item = SaveRevDataID then if fishok[i]=1 then					begin						out2Reply.fname := concat(theReply.sfFile.name, '.revdata');						rewrite(outfile2, out2Reply.fname);						holdi:= i;						i:=0;						repeat							begin							i:=i+1;							writeln(outfile2, spec[i]:10, num[i]:8:2, f1[i]:8:2, pal[i]:8:2, max[i]:8:2, lj[i]:8:2, d1[i]:8:2, pmasc1[i]:8:2, pmasc2[i]:8:2, pmalv[i]:8:2, denttop[i]:8:2, ljbot[i]:8:2, dcorner[i]:8:2, openlev[i]:8:2);							end;						until i=fishcount;						close(outfile2);						i:= holdi;					end;								if item = SaveNewCoordsID then if fishok[i]=1 then			begin				out5Reply.fname := concat(theReply.sfFile.name, '.rawcoord');				rewrite(outfile5, out5Reply.fname);				out6Reply.fname := concat(theReply.sfFile.name, '.rotcoord');				rewrite(outfile6, out6Reply.fname);				out7Reply.fname := concat(theReply.sfFile.name, '.protcoord');				rewrite(outfile7, out7Reply.fname);				holdi:= i;				i:=0;				repeat					begin					i:=i+1;					writeln(outfile5, spec[i]:10, num[i]:8:2, x1[i]:8:2, y1[i]:8:2, x2[i]:8:2, y2[i]:8:2, x3[i]:8:2, y3[i]:8:2, x4[i]:8:2, y4[i]:8:2, x5[i]:8:2, y5[i]:8:2, x6[i]:8:2, y6[i]:8:2, x7[i]:8:2, y7[i]:8:2, x8[i]:8:2, y8[i]:8:2, x9[i]:8:2, y9[i]:8:2, x10[i]:8:2, y10[i]:8:2, x11[i]:8:2, y11[i]:8:2, x12[i]:8:2, y12[i]:8:2, x13[i]:8:2, y13[i]:8:2, x14[i]:8:2, y14[i]:8:2, x15[i]:8:2, y15[i]:8:2, x16[i]:8:2, y16[i]:8:2, x17[i]:8:2, y17[i]:8:2, x18[i]:8:2, y18[i]:8:2, x19[i]:8:2, y19[i]:8:2, x20[i]:8:2, y20[i]:8:2);					writeln(outfile6, spec[i]:10, num[i]:8:2, rx1[i]:8:2, ry1[i]:8:2, rx2[i]:8:2, ry2[i]:8:2, rx3[i]:8:2, ry3[i]:8:2, rx4[i]:8:2, ry4[i]:8:2, rx5[i]:8:2, ry5[i]:8:2, rx6[i]:8:2, ry6[i]:8:2, rx7[i]:8:2, ry7[i]:8:2, rx8[i]:8:2, ry8[i]:8:2, rx9[i]:8:2, ry9[i]:8:2, rx10[i]:8:2, ry10[i]:8:2, rx11[i]:8:2, ry11[i]:8:2, rx12[i]:8:2, ry12[i]:8:2, rx13[i]:8:2, ry13[i]:8:2, rx14[i]:8:2, ry14[i]:8:2, rx15[i]:8:2, ry15[i]:8:2, rx16[i]:8:2, ry16[i]:8:2, rx17[i]:8:2, ry17[i]:8:2, rx18[i]:8:2, ry18[i]:8:2, rx19[i]:8:2, ry19[i]:8:2, rx20[i]:8:2, ry20[i]:8:2);					writeln(outfile7, spec[i]:10, num[i]:8:2, ux1[i]:8:2, uy1[i]:8:2, ux2[i]:8:2, uy2[i]:8:2, ux3[i]:8:2, uy3[i]:8:2, ux4[i]:8:2, uy4[i]:8:2, ux5[i]:8:2, uy5[i]:8:2, ux6[i]:8:2, uy6[i]:8:2, ux7[i]:8:2, uy7[i]:8:2, ux8[i]:8:2, uy8[i]:8:2, ux9[i]:8:2, uy9[i]:8:2, ux10[i]:8:2, uy10[i]:8:2, ux11[i]:8:2, uy11[i]:8:2, ux12[i]:8:2, uy12[i]:8:2, ux13[i]:8:2, uy13[i]:8:2, ux14[i]:8:2, uy14[i]:8:2, ux15[i]:8:2, uy15[i]:8:2, ux16[i]:8:2, uy16[i]:8:2, ux17[i]:8:2, uy17[i]:8:2, ux18[i]:8:2, uy18[i]:8:2, ux19[i]:8:2, uy19[i]:8:2, ux20[i]:8:2, uy20[i]:8:2);					end;				until i=fishcount;				close(outfile2);				i:= holdi;			end;											until (item = QuitID);				DisposeDialog(myDialog);				close(outfile1);		end;{---------------------------------ClearScreen--------------------------------------------}Procedure ClearScreen;var myrect:rect;begin	setrect(myrect,350,40,1200,700);	eraserect(myrect);end;{---------------------------------DoOpenCoordFile--------------------------------------------}Procedure OpenCoordFile;begin	GetFileName(theReply);	if theReply.sfgood then	begin		Open(thefile, Concat(GetFullPathStr(theReply.sfFile), theReply.sfFile.name));		i := 0;		while not eof(thefile) do			begin				i:=i+1;				fishok[i]:=0;				fishcount:=i;				fishnum[i]:=i;				readln(thefile,  c1[i], c2[i], c3[i], c4[i], c5[i], c6[i], c7[i], c8[i], num[i], x1[i], y1[i], x2[i], y2[i], x3[i], y3[i], x4[i], y4[i], x5[i], y5[i], x6[i], y6[i], x7[i], y7[i], x8[i], y8[i], x9[i], y9[i], x10[i], y10[i], x11[i], y11[i], x12[i], y12[i], x13[i], y13[i], x14[i], y14[i], x15[i], y15[i], x16[i], y16[i], x17[i], y17[i], x18[i], y18[i], x19[i], y19[i], x20[i], y20[i]);				spec[i]:= c1[i]+c2[i]+c3[i]+c4[i]+c5[i]+c6[i]+c7[i]+c8[i];				if ((x20[i]>0) OR (x20[i]<0)) AND ((y20[i]>0) OR (y20[i]<0)) then fishok[i]:=1;				errnum:=26;				if fishok[i]=0 then ShowError;					if fishok[i]=1 then if y14[i] < y12[i] then						begin							y1[i]:= y1[i]* -1;							y2[i]:= y2[i]* -1;							y3[i]:= y3[i]* -1;							y4[i]:= y4[i]* -1;							y5[i]:= y5[i]* -1;							y6[i]:= y6[i]* -1;							y7[i]:= y7[i]* -1;							y8[i]:= y8[i]* -1;							y9[i]:= y9[i]* -1;							y10[i]:= y10[i]* -1;							y11[i]:= y11[i]* -1;							y12[i]:= y12[i]* -1;							y13[i]:= y13[i]* -1;							y14[i]:= y14[i]* -1;							y15[i]:= y15[i]* -1;							y16[i]:= y16[i]* -1;							y17[i]:= y17[i]* -1;							y18[i]:= y18[i]* -1;							y19[i]:= y19[i]* -1;							y20[i]:= y20[i]* -1;						end;					if fishok[i]=1 then if x1[i] < x19[i] then						begin							x1[i]:= x1[i]* -1;							x2[i]:= x2[i]* -1;							x3[i]:= x3[i]* -1;							x4[i]:= x4[i]* -1;							x5[i]:= x5[i]* -1;							x6[i]:= x6[i]* -1;							x7[i]:= x7[i]* -1;							x8[i]:= x8[i]* -1;							x9[i]:= x9[i]* -1;							x10[i]:= x10[i]* -1;							x11[i]:= x11[i]* -1;							x12[i]:= x12[i]* -1;							x13[i]:= x13[i]* -1;							x14[i]:= x14[i]* -1;							x15[i]:= x15[i]* -1;							x16[i]:= x16[i]* -1;							x17[i]:= x17[i]* -1;							x18[i]:= x18[i]* -1;							x19[i]:= x19[i]* -1;							x20[i]:= x20[i]* -1;						end;			end;				end;	close(thefile);end;{---------------------------------Rotate Coords--------------------------------------------}Procedure RotateCoords;begin	fixslope[i]:= (x9[i]-x11[i])/(y9[i]-y11[i]);	rot:=1;	if fixslope[i] > 0 then rot:= 1;	if fixslope[i] < 0 then rot:= -1;	sidea:= f1[i];	sideb:= y9[i]-y11[i];	sidec:= abs(x9[i]-x11[i]);	trianglecalc;	yaxisfixang[i]:= angab; 	rx1[i]:= (x1[i]*cos(yaxisfixang[i]*con)) - (rot*y1[i]*sin(yaxisfixang[i]*con));	ry1[i]:= (y1[i]*cos(yaxisfixang[i]*con)) + (rot*x1[i]*sin(yaxisfixang[i]*con));	rx2[i]:= (x2[i]*cos(yaxisfixang[i]*con)) - (rot*y2[i]*sin(yaxisfixang[i]*con));	ry2[i]:= (y2[i]*cos(yaxisfixang[i]*con)) + (rot*x2[i]*sin(yaxisfixang[i]*con));	rx3[i]:= (x3[i]*cos(yaxisfixang[i]*con)) - (rot*y3[i]*sin(yaxisfixang[i]*con));	ry3[i]:= (y3[i]*cos(yaxisfixang[i]*con)) + (rot*x3[i]*sin(yaxisfixang[i]*con));	rx4[i]:= (x4[i]*cos(yaxisfixang[i]*con)) - (rot*y4[i]*sin(yaxisfixang[i]*con));	ry4[i]:= (y4[i]*cos(yaxisfixang[i]*con)) + (rot*x4[i]*sin(yaxisfixang[i]*con));	rx5[i]:= (x5[i]*cos(yaxisfixang[i]*con)) - (rot*y5[i]*sin(yaxisfixang[i]*con));	ry5[i]:= (y5[i]*cos(yaxisfixang[i]*con)) + (rot*x5[i]*sin(yaxisfixang[i]*con));	rx6[i]:= (x6[i]*cos(yaxisfixang[i]*con)) - (rot*y6[i]*sin(yaxisfixang[i]*con));	ry6[i]:= (y6[i]*cos(yaxisfixang[i]*con)) + (rot*x6[i]*sin(yaxisfixang[i]*con));	rx7[i]:= (x7[i]*cos(yaxisfixang[i]*con)) - (rot*y7[i]*sin(yaxisfixang[i]*con));	ry7[i]:= (y7[i]*cos(yaxisfixang[i]*con)) + (rot*x7[i]*sin(yaxisfixang[i]*con));	rx8[i]:= (x8[i]*cos(yaxisfixang[i]*con)) - (rot*y8[i]*sin(yaxisfixang[i]*con));	ry8[i]:= (y8[i]*cos(yaxisfixang[i]*con)) + (rot*x8[i]*sin(yaxisfixang[i]*con));	rx9[i]:= (x9[i]*cos(yaxisfixang[i]*con)) - (rot*y9[i]*sin(yaxisfixang[i]*con));	ry9[i]:= (y9[i]*cos(yaxisfixang[i]*con)) + (rot*x9[i]*sin(yaxisfixang[i]*con));		rx10[i]:= (x10[i]*cos(yaxisfixang[i]*con)) - (rot*y10[i]*sin(yaxisfixang[i]*con));	ry10[i]:= (y10[i]*cos(yaxisfixang[i]*con)) + (rot*x10[i]*sin(yaxisfixang[i]*con));	rx11[i]:= (x11[i]*cos(yaxisfixang[i]*con)) - (rot*y11[i]*sin(yaxisfixang[i]*con));	ry11[i]:= (y11[i]*cos(yaxisfixang[i]*con)) + (rot*x11[i]*sin(yaxisfixang[i]*con));	rx12[i]:= (x12[i]*cos(yaxisfixang[i]*con)) - (rot*y12[i]*sin(yaxisfixang[i]*con));	ry12[i]:= (y12[i]*cos(yaxisfixang[i]*con)) + (rot*x12[i]*sin(yaxisfixang[i]*con));	rx13[i]:= (x13[i]*cos(yaxisfixang[i]*con)) - (rot*y13[i]*sin(yaxisfixang[i]*con));	ry13[i]:= (y13[i]*cos(yaxisfixang[i]*con)) + (rot*x13[i]*sin(yaxisfixang[i]*con));	rx14[i]:= (x14[i]*cos(yaxisfixang[i]*con)) - (rot*y14[i]*sin(yaxisfixang[i]*con));	ry14[i]:= (y14[i]*cos(yaxisfixang[i]*con)) + (rot*x14[i]*sin(yaxisfixang[i]*con));	rx15[i]:= (x15[i]*cos(yaxisfixang[i]*con)) - (rot*y15[i]*sin(yaxisfixang[i]*con));	ry15[i]:= (y15[i]*cos(yaxisfixang[i]*con)) + (rot*x15[i]*sin(yaxisfixang[i]*con));	rx16[i]:= (x16[i]*cos(yaxisfixang[i]*con)) - (rot*y16[i]*sin(yaxisfixang[i]*con));	ry16[i]:= (y16[i]*cos(yaxisfixang[i]*con)) + (rot*x16[i]*sin(yaxisfixang[i]*con));	rx17[i]:= (x17[i]*cos(yaxisfixang[i]*con)) - (rot*y17[i]*sin(yaxisfixang[i]*con));	ry17[i]:= (y17[i]*cos(yaxisfixang[i]*con)) + (rot*x17[i]*sin(yaxisfixang[i]*con));	rx18[i]:= (x18[i]*cos(yaxisfixang[i]*con)) - (rot*y18[i]*sin(yaxisfixang[i]*con));	ry18[i]:= (y18[i]*cos(yaxisfixang[i]*con)) + (rot*x18[i]*sin(yaxisfixang[i]*con));	rx19[i]:= (x19[i]*cos(yaxisfixang[i]*con)) - (rot*y19[i]*sin(yaxisfixang[i]*con));	ry19[i]:= (y19[i]*cos(yaxisfixang[i]*con)) + (rot*x19[i]*sin(yaxisfixang[i]*con));	rx20[i]:= (x20[i]*cos(yaxisfixang[i]*con)) - (rot*y20[i]*sin(yaxisfixang[i]*con));	ry20[i]:= (y20[i]*cos(yaxisfixang[i]*con)) + (rot*x20[i]*sin(yaxisfixang[i]*con));end;{---------------------------------Set Draw Raw Coords--------------------------------------------}Procedure SetDrawRawCoords;beginmx1[i]:= x1[i];mx2[i]:= x2[i];mx3[i]:= x3[i];mx4[i]:= x4[i];mx5[i]:= x5[i];mx6[i]:= x6[i];mx7[i]:= x7[i];mx8[i]:= x8[i];mx9[i]:= x9[i];mx10[i]:= x10[i];mx11[i]:= x11[i];mx12[i]:= x12[i];mx13[i]:= x13[i];mx14[i]:= x14[i];mx15[i]:= x15[i];mx16[i]:= x16[i];mx17[i]:= x17[i];mx18[i]:= x18[i];mx19[i]:= x19[i];mx20[i]:= x20[i];my1[i]:= y1[i]*-1;{Invert Ys}my2[i]:= y2[i]*-1;my3[i]:= y3[i]*-1;my4[i]:= y4[i]*-1;my5[i]:= y5[i]*-1;my6[i]:= y6[i]*-1;my7[i]:= y7[i]*-1;my8[i]:= y8[i]*-1;my9[i]:= y9[i]*-1;my10[i]:= y10[i]*-1;my11[i]:= y11[i]*-1;my12[i]:= y12[i]*-1;my13[i]:= y13[i]*-1;my14[i]:= y14[i]*-1;my15[i]:= y15[i]*-1;my16[i]:= y16[i]*-1;my17[i]:= y17[i]*-1;my18[i]:= y18[i]*-1;my19[i]:= y19[i]*-1;my20[i]:= y20[i]*-1;end;{---------------------------------Multiply Raw Coords--------------------------------------------}Procedure MultRawCoords;beginmx1[i]:= mx1[i]*1.1;mx2[i]:= mx2[i]*1.1;mx3[i]:= mx3[i]*1.1;mx4[i]:= mx4[i]*1.1;mx5[i]:= mx5[i]*1.1;mx6[i]:= mx6[i]*1.1;mx7[i]:= mx7[i]*1.1;mx8[i]:= mx8[i]*1.1;mx9[i]:= mx9[i]*1.1;mx10[i]:= mx10[i]*1.1;mx11[i]:= mx11[i]*1.1;mx12[i]:= mx12[i]*1.1;mx13[i]:= mx13[i]*1.1;mx14[i]:= mx14[i]*1.1;mx15[i]:= mx15[i]*1.1;mx16[i]:= mx16[i]*1.1;mx17[i]:= mx17[i]*1.1;mx18[i]:= mx18[i]*1.1;mx19[i]:= mx19[i]*1.1;mx20[i]:= mx20[i]*1.1;my1[i]:= my1[i]*1.1;my2[i]:= my2[i]*1.1;my3[i]:= my3[i]*1.1;my4[i]:= my4[i]*1.1;my5[i]:= my5[i]*1.1;my6[i]:= my6[i]*1.1;my7[i]:= my7[i]*1.1;my8[i]:= my8[i]*1.1;my9[i]:= my9[i]*1.1;my10[i]:= my10[i]*1.1;my11[i]:= my11[i]*1.1;my12[i]:= my12[i]*1.1;my13[i]:= my13[i]*1.1;my14[i]:= my14[i]*1.1;my15[i]:= my15[i]*1.1;my16[i]:= my16[i]*1.1;my17[i]:= my17[i]*1.1;my18[i]:= my18[i]*1.1;my19[i]:= my19[i]*1.1;my20[i]:= my20[i]*1.1;end;{---------------------------------Draw Raw Coords--------------------------------------------}Procedure DrawRawCoords;begindrawflag:='o';dx1[i]:= RoundDtoI(mx1[i]);dx2[i]:= RoundDtoI(mx2[i]);dx3[i]:= RoundDtoI(mx3[i]);dx4[i]:= RoundDtoI(mx4[i]);dx5[i]:= RoundDtoI(mx5[i]);dx6[i]:= RoundDtoI(mx6[i]);dx7[i]:= RoundDtoI(mx7[i]);dx8[i]:= RoundDtoI(mx8[i]);dx9[i]:= RoundDtoI(mx9[i]);dx10[i]:= RoundDtoI(mx10[i]);dx11[i]:= RoundDtoI(mx11[i]);dx12[i]:= RoundDtoI(mx12[i]);dx13[i]:= RoundDtoI(mx13[i]);dx14[i]:= RoundDtoI(mx14[i]);dx15[i]:= RoundDtoI(mx15[i]);dx16[i]:= RoundDtoI(mx16[i]);dx17[i]:= RoundDtoI(mx17[i]);dx18[i]:= RoundDtoI(mx18[i]);dx19[i]:= RoundDtoI(mx19[i]);dx20[i]:= RoundDtoI(mx20[i]);dy1[i]:= RoundDtoI(my1[i]);dy2[i]:= RoundDtoI(my2[i]);dy3[i]:= RoundDtoI(my3[i]);dy4[i]:= RoundDtoI(my4[i]);dy5[i]:= RoundDtoI(my5[i]);dy6[i]:= RoundDtoI(my6[i]);dy7[i]:= RoundDtoI(my7[i]);dy8[i]:= RoundDtoI(my8[i]);dy9[i]:= RoundDtoI(my9[i]);dy10[i]:= RoundDtoI(my10[i]);dy11[i]:= RoundDtoI(my11[i]);dy12[i]:= RoundDtoI(my12[i]);dy13[i]:= RoundDtoI(my13[i]);dy14[i]:= RoundDtoI(my14[i]);dy15[i]:= RoundDtoI(my15[i]);dy16[i]:= RoundDtoI(my16[i]);dy17[i]:= RoundDtoI(my17[i]);dy18[i]:= RoundDtoI(my18[i]);dy19[i]:= RoundDtoI(my19[i]);dy20[i]:= RoundDtoI(my20[i]);xbase:=750;ybase:=520;repeatdx1[i]:= dx1[i]+1;dx2[i]:= dx2[i]+1;dx3[i]:= dx3[i]+1;dx4[i]:= dx4[i]+1;dx5[i]:= dx5[i]+1;dx6[i]:= dx6[i]+1;dx7[i]:= dx7[i]+1;dx8[i]:= dx8[i]+1;dx9[i]:= dx9[i]+1;dx10[i]:= dx10[i]+1;dx11[i]:= dx11[i]+1;dx12[i]:= dx12[i]+1;dx13[i]:= dx13[i]+1;dx14[i]:= dx14[i]+1;dx15[i]:= dx15[i]+1;dx16[i]:= dx16[i]+1;dx17[i]:= dx17[i]+1;dx18[i]:= dx18[i]+1;dx19[i]:= dx19[i]+1;dx20[i]:= dx20[i]+1;until dx11[i] > xbase;repeatdy1[i]:= dy1[i]+1;dy2[i]:= dy2[i]+1;dy3[i]:= dy3[i]+1;dy4[i]:= dy4[i]+1;dy5[i]:= dy5[i]+1;dy6[i]:= dy6[i]+1;dy7[i]:= dy7[i]+1;dy8[i]:= dy8[i]+1;dy9[i]:= dy9[i]+1;dy10[i]:= dy10[i]+1;dy11[i]:= dy11[i]+1;dy12[i]:= dy12[i]+1;dy13[i]:= dy13[i]+1;dy14[i]:= dy14[i]+1;dy15[i]:= dy15[i]+1;dy16[i]:= dy16[i]+1;dy17[i]:= dy17[i]+1;dy18[i]:= dy18[i]+1;dy19[i]:= dy19[i]+1;dy20[i]:= dy20[i]+1;until dy11[i] > ybase;eye:= RoundDtoI((dx10[i]-dx13[i])/4);dxeye:= RoundDtoI(dx13[i]+((dx10[i]-dx13[i])/2));dyeye:= RoundDtoI(dy13[i]+((dy10[i]-dy13[i])/2));	pensize(2, 2);	MoveTo(dx12[i], dy12[i]);	LineTo(dx11[i], dy11[i]);	LineTo(dx6[i], dy6[i]);	LineTo(dx5[i], dy5[i]);	LineTo(dx2[i], dy2[i]);	LineTo(dx7[i], dy7[i]);	LineTo(dx12[i], dy12[i]);	MoveTo(dx3[i], dy3[i]);	LineTo(dx9[i], dy9[i]);	LineTo(dx11[i], dy11[i]);	LineTo(dx5[i], dy5[i]);	LineTo(dx3[i], dy3[i]);	LineTo(dx4[i], dy4[i]);	LineTo(dx5[i], dy5[i]);	MoveTo(dx5[i], dy5[i]);	LineTo(dx1[i], dy1[i]);	LineTo(dx8[i], dy8[i]);	MoveTo(dx9[i], dy9[i]);	LineTo(dx14[i], dy14[i]);	LineTo(dx19[i], dy19[i]);	LineTo(dx18[i], dy18[i]);	LineTo(dx12[i], dy12[i]);	RGBforecolor(green);	MoveTo(dx15[i], dy15[i]);	LineTo(dx7[i], dy7[i]);	MoveTo(dx16[i], dy16[i]);	LineTo(dx4[i], dy4[i]);	MoveTo(dx17[i], dy17[i]);	LineTo(dx6[i], dy6[i]);	RGBforecolor(red);	setrect(circlerect, dx1[i]-3, dy1[i]-3, dx1[i]+3, dy1[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx2[i]-3, dy2[i]-3, dx2[i]+3, dy2[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx3[i]-3, dy3[i]-3, dx3[i]+3, dy3[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx4[i]-3, dy4[i]-3, dx4[i]+3, dy4[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx5[i]-3, dy5[i]-3, dx5[i]+3, dy5[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx6[i]-3, dy6[i]-3, dx6[i]+3, dy6[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx7[i]-3, dy7[i]-3, dx7[i]+3, dy7[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx8[i]-3, dy8[i]-3, dx8[i]+3, dy8[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx9[i]-3, dy9[i]-3, dx9[i]+3, dy9[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx11[i]-3, dy11[i]-3, dx11[i]+3, dy11[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx12[i]-3, dy12[i]-3, dx12[i]+3, dy12[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx20[i]-3, dy20[i]-3, dx20[i]+3, dy20[i]+3);	PaintOval(circlerect);	RGBforecolor(green);	setrect(circlerect, dx10[i]-3, dy10[i]-3, dx10[i]+3, dy10[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx13[i]-3, dy13[i]-3, dx13[i]+3, dy13[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx14[i]-3, dy14[i]-3, dx14[i]+3, dy14[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx15[i]-3, dy15[i]-3, dx15[i]+3, dy15[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx16[i]-3, dy16[i]-3, dx16[i]+3, dy16[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx17[i]-3, dy17[i]-3, dx17[i]+3, dy17[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx18[i]-3, dy18[i]-3, dx18[i]+3, dy18[i]+3);	PaintOval(circlerect);	setrect(circlerect, dx19[i]-3, dy19[i]-3, dx19[i]+3, dy19[i]+3);	PaintOval(circlerect);	RGBforecolor(blue);	setrect(eyerect, dxeye-eye, dyeye-eye, dxeye+eye, dyeye+eye);	PaintOval(eyerect);	RGBforecolor(black);end;{---------------------------------Set Draw Rotated Coords--------------------------------------------}Procedure SetDrawRotCoords;beginmrx1[i]:= rx1[i];mrx2[i]:= rx2[i];mrx3[i]:= rx3[i];mrx4[i]:= rx4[i];mrx5[i]:= rx5[i];mrx6[i]:= rx6[i];mrx7[i]:= rx7[i];mrx8[i]:= rx8[i];mrx9[i]:= rx9[i];mrx10[i]:= rx10[i];mrx11[i]:= rx11[i];mrx12[i]:= rx12[i];mrx13[i]:= rx13[i];mrx14[i]:= rx14[i];mrx15[i]:= rx15[i];mrx16[i]:= rx16[i];mrx17[i]:= rx17[i];mrx18[i]:= rx18[i];mrx19[i]:= rx19[i];mrx20[i]:= rx20[i];mry1[i]:= ry1[i]*-1;  {Invert Ys}mry2[i]:= ry2[i]*-1;mry3[i]:= ry3[i]*-1;mry4[i]:= ry4[i]*-1;mry5[i]:= ry5[i]*-1;mry6[i]:= ry6[i]*-1;mry7[i]:= ry7[i]*-1;mry8[i]:= ry8[i]*-1;mry9[i]:= ry9[i]*-1;mry10[i]:= ry10[i]*-1;mry11[i]:= ry11[i]*-1;mry12[i]:= ry12[i]*-1;mry13[i]:= ry13[i]*-1;mry14[i]:= ry14[i]*-1;mry15[i]:= ry15[i]*-1;mry16[i]:= ry16[i]*-1;mry17[i]:= ry17[i]*-1;mry18[i]:= ry18[i]*-1;mry19[i]:= ry19[i]*-1;mry20[i]:= ry20[i]*-1;end;{---------------------------------Multiply Rotated Coords--------------------------------------------}Procedure MultRotCoords;beginmrx1[i]:= mrx1[i]*1.1;mrx2[i]:= mrx2[i]*1.1;mrx3[i]:= mrx3[i]*1.1;mrx4[i]:= mrx4[i]*1.1;mrx5[i]:= mrx5[i]*1.1;mrx6[i]:= mrx6[i]*1.1;mrx7[i]:= mrx7[i]*1.1;mrx8[i]:= mrx8[i]*1.1;mrx9[i]:= mrx9[i]*1.1;mrx10[i]:= mrx10[i]*1.1;mrx11[i]:= mrx11[i]*1.1;mrx12[i]:= mrx12[i]*1.1;mrx13[i]:= mrx13[i]*1.1;mrx14[i]:= mrx14[i]*1.1;mrx15[i]:= mrx15[i]*1.1;mrx16[i]:= mrx16[i]*1.1;mrx17[i]:= mrx17[i]*1.1;mrx18[i]:= mrx18[i]*1.1;mrx19[i]:= mrx19[i]*1.1;mrx20[i]:= mrx20[i]*1.1;mry1[i]:= mry1[i]*1.1;mry2[i]:= mry2[i]*1.1;mry3[i]:= mry3[i]*1.1;mry4[i]:= mry4[i]*1.1;mry5[i]:= mry5[i]*1.1;mry6[i]:= mry6[i]*1.1;mry7[i]:= mry7[i]*1.1;mry8[i]:= mry8[i]*1.1;mry9[i]:= mry9[i]*1.1;mry10[i]:= mry10[i]*1.1;mry11[i]:= mry11[i]*1.1;mry12[i]:= mry12[i]*1.1;mry13[i]:= mry13[i]*1.1;mry14[i]:= mry14[i]*1.1;mry15[i]:= mry15[i]*1.1;mry16[i]:= mry16[i]*1.1;mry17[i]:= mry17[i]*1.1;mry18[i]:= mry18[i]*1.1;mry19[i]:= mry19[i]*1.1;mry20[i]:= mry20[i]*1.1;end;{---------------------------------Draw Rotated Coords--------------------------------------------}Procedure DrawRotCoords;begindrawflag:='r';drx1[i]:= RoundDtoI(mrx1[i]);drx2[i]:= RoundDtoI(mrx2[i]);drx3[i]:= RoundDtoI(mrx3[i]);drx4[i]:= RoundDtoI(mrx4[i]);drx5[i]:= RoundDtoI(mrx5[i]);drx6[i]:= RoundDtoI(mrx6[i]);drx7[i]:= RoundDtoI(mrx7[i]);drx8[i]:= RoundDtoI(mrx8[i]);drx9[i]:= RoundDtoI(mrx9[i]);drx10[i]:= RoundDtoI(mrx10[i]);drx11[i]:= RoundDtoI(mrx11[i]);drx12[i]:= RoundDtoI(mrx12[i]);drx13[i]:= RoundDtoI(mrx13[i]);drx14[i]:= RoundDtoI(mrx14[i]);drx15[i]:= RoundDtoI(mrx15[i]);drx16[i]:= RoundDtoI(mrx16[i]);drx17[i]:= RoundDtoI(mrx17[i]);drx18[i]:= RoundDtoI(mrx18[i]);drx19[i]:= RoundDtoI(mrx19[i]);drx20[i]:= RoundDtoI(mrx20[i]);dry1[i]:= RoundDtoI(mry1[i]);dry2[i]:= RoundDtoI(mry2[i]);dry3[i]:= RoundDtoI(mry3[i]);dry4[i]:= RoundDtoI(mry4[i]);dry5[i]:= RoundDtoI(mry5[i]);dry6[i]:= RoundDtoI(mry6[i]);dry7[i]:= RoundDtoI(mry7[i]);dry8[i]:= RoundDtoI(mry8[i]);dry9[i]:= RoundDtoI(mry9[i]);dry10[i]:= RoundDtoI(mry10[i]);dry11[i]:= RoundDtoI(mry11[i]);dry12[i]:= RoundDtoI(mry12[i]);dry13[i]:= RoundDtoI(mry13[i]);dry14[i]:= RoundDtoI(mry14[i]);dry15[i]:= RoundDtoI(mry15[i]);dry16[i]:= RoundDtoI(mry16[i]);dry17[i]:= RoundDtoI(mry17[i]);dry18[i]:= RoundDtoI(mry18[i]);dry19[i]:= RoundDtoI(mry19[i]);dry20[i]:= RoundDtoI(mry20[i]);xbase:=750;ybase:=520;repeatdrx1[i]:= drx1[i]+1;drx2[i]:= drx2[i]+1;drx3[i]:= drx3[i]+1;drx4[i]:= drx4[i]+1;drx5[i]:= drx5[i]+1;drx6[i]:= drx6[i]+1;drx7[i]:= drx7[i]+1;drx8[i]:= drx8[i]+1;drx9[i]:= drx9[i]+1;drx10[i]:= drx10[i]+1;drx11[i]:= drx11[i]+1;drx12[i]:= drx12[i]+1;drx13[i]:= drx13[i]+1;drx14[i]:= drx14[i]+1;drx15[i]:= drx15[i]+1;drx16[i]:= drx16[i]+1;drx17[i]:= drx17[i]+1;drx18[i]:= drx18[i]+1;drx19[i]:= drx19[i]+1;drx20[i]:= drx20[i]+1;until drx11[i] > xbase;repeatdry1[i]:= dry1[i]+1;dry2[i]:= dry2[i]+1;dry3[i]:= dry3[i]+1;dry4[i]:= dry4[i]+1;dry5[i]:= dry5[i]+1;dry6[i]:= dry6[i]+1;dry7[i]:= dry7[i]+1;dry8[i]:= dry8[i]+1;dry9[i]:= dry9[i]+1;dry10[i]:= dry10[i]+1;dry11[i]:= dry11[i]+1;dry12[i]:= dry12[i]+1;dry13[i]:= dry13[i]+1;dry14[i]:= dry14[i]+1;dry15[i]:= dry15[i]+1;dry16[i]:= dry16[i]+1;dry17[i]:= dry17[i]+1;dry18[i]:= dry18[i]+1;dry19[i]:= dry19[i]+1;dry20[i]:= dry20[i]+1;until dry11[i] > ybase;eye:= RoundDtoI((drx10[i]-drx13[i])/4);dxeye:= RoundDtoI(drx13[i]+((drx10[i]-drx13[i])/2));dyeye:= RoundDtoI(dry13[i]+((dry10[i]-dry13[i])/2));	pensize(2, 2);	MoveTo(drx12[i], dry12[i]);	LineTo(drx11[i], dry11[i]);	LineTo(drx6[i], dry6[i]);	LineTo(drx5[i], dry5[i]);	LineTo(drx2[i], dry2[i]);	LineTo(drx7[i], dry7[i]);	LineTo(drx12[i], dry12[i]);	MoveTo(drx3[i], dry3[i]);	LineTo(drx9[i], dry9[i]);	LineTo(drx11[i], dry11[i]);	LineTo(drx5[i], dry5[i]);	LineTo(drx3[i], dry3[i]);	LineTo(drx4[i], dry4[i]);	LineTo(drx5[i], dry5[i]);	MoveTo(drx5[i], dry5[i]);	LineTo(drx1[i], dry1[i]);	LineTo(drx8[i], dry8[i]);	MoveTo(drx9[i], dry9[i]);	LineTo(drx14[i], dry14[i]);	LineTo(drx19[i], dry19[i]);	LineTo(drx18[i], dry18[i]);	LineTo(drx12[i], dry12[i]);	RGBforecolor(green);	MoveTo(drx15[i], dry15[i]);	LineTo(drx7[i], dry7[i]);	MoveTo(drx16[i], dry16[i]);	LineTo(drx4[i], dry4[i]);	MoveTo(drx17[i], dry17[i]);	LineTo(drx6[i], dry6[i]);	RGBforecolor(red);	setrect(circlerect, drx1[i]-3, dry1[i]-3, drx1[i]+3, dry1[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx2[i]-3, dry2[i]-3, drx2[i]+3, dry2[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx3[i]-3, dry3[i]-3, drx3[i]+3, dry3[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx4[i]-3, dry4[i]-3, drx4[i]+3, dry4[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx5[i]-3, dry5[i]-3, drx5[i]+3, dry5[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx6[i]-3, dry6[i]-3, drx6[i]+3, dry6[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx7[i]-3, dry7[i]-3, drx7[i]+3, dry7[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx8[i]-3, dry8[i]-3, drx8[i]+3, dry8[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx9[i]-3, dry9[i]-3, drx9[i]+3, dry9[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx11[i]-3, dry11[i]-3, drx11[i]+3, dry11[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx12[i]-3, dry12[i]-3, drx12[i]+3, dry12[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx20[i]-3, dry20[i]-3, drx20[i]+3, dry20[i]+3);	PaintOval(circlerect);	RGBforecolor(green);	setrect(circlerect, drx10[i]-3, dry10[i]-3, drx10[i]+3, dry10[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx13[i]-3, dry13[i]-3, drx13[i]+3, dry13[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx14[i]-3, dry14[i]-3, drx14[i]+3, dry14[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx15[i]-3, dry15[i]-3, drx15[i]+3, dry15[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx16[i]-3, dry16[i]-3, drx16[i]+3, dry16[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx17[i]-3, dry17[i]-3, drx17[i]+3, dry17[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx18[i]-3, dry18[i]-3, drx18[i]+3, dry18[i]+3);	PaintOval(circlerect);	setrect(circlerect, drx19[i]-3, dry19[i]-3, drx19[i]+3, dry19[i]+3);	PaintOval(circlerect);	RGBforecolor(blue);	setrect(eyerect, dxeye-eye, dyeye-eye, dxeye+eye, dyeye+eye);	PaintOval(eyerect);	RGBforecolor(black);end;{---------------------------------Calc Protruded Coords--------------------------------------------}Procedure ProtCoords;beginnx1[i]:= rx1[i]+cx1[i];ny1[i]:= ry1[i]+cy1[i];nx2[i]:= rx2[i]+cx2[i];ny2[i]:= ry2[i]+cy2[i];nx3[i]:= rx3[i]+cx3[i];ny3[i]:= ry3[i]+cy3[i];nx4[i]:= rx4[i]+cx4[i];ny4[i]:= ry4[i]+cy4[i];nx5[i]:= rx5[i]+cx5[i];ny5[i]:= ry5[i]+cy5[i];nx6[i]:= rx6[i]+cx6[i];ny6[i]:= ry6[i]+cy6[i];nx7[i]:= rx7[i]+cx7[i];ny7[i]:= ry7[i]+cy7[i];nx8[i]:= rx8[i]+cx8[i];ny8[i]:= ry8[i]+cy8[i];nx9[i]:= rx9[i];ny9[i]:= ry9[i];nx10[i]:= rx10[i];ny10[i]:= ry10[i];nx11[i]:= rx11[i];ny11[i]:= ry11[i];nx12[i]:= rx12[i]+cx12[i];ny12[i]:= ry12[i]+cy12[i];nx13[i]:= rx13[i];ny13[i]:= ry13[i];nx14[i]:= rx14[i];ny14[i]:= ry14[i];nx15[i]:= rx15[i];ny15[i]:= ry15[i];nx16[i]:= rx16[i];ny16[i]:= ry16[i];nx17[i]:= rx17[i];ny17[i]:= ry17[i];nx18[i]:= rx18[i];ny18[i]:= ry18[i];nx19[i]:= rx19[i];ny19[i]:= ry19[i];nx20[i]:= rx20[i]+cx20[i];ny20[i]:= ry20[i]+cy20[i];end;{---------------------------------Set Draw Prot Rotated Coords--------------------------------------------}Procedure SetDrawProtCoords;beginmnx1[i]:= nx1[i];mnx2[i]:= nx2[i];mnx3[i]:= nx3[i];mnx4[i]:= nx4[i];mnx5[i]:= nx5[i];mnx6[i]:= nx6[i];mnx7[i]:= nx7[i];mnx8[i]:= nx8[i];mnx9[i]:= nx9[i];mnx10[i]:= nx10[i];mnx11[i]:= nx11[i];mnx12[i]:= nx12[i];mnx13[i]:= nx13[i];mnx14[i]:= nx14[i];mnx15[i]:= nx15[i];mnx16[i]:= nx16[i];mnx17[i]:= nx17[i];mnx18[i]:= nx18[i];mnx19[i]:= nx19[i];mnx20[i]:= nx20[i];mny1[i]:= ny1[i]*-1;{Invert Ys}mny2[i]:= ny2[i]*-1;mny3[i]:= ny3[i]*-1;mny4[i]:= ny4[i]*-1;mny5[i]:= ny5[i]*-1;mny6[i]:= ny6[i]*-1;mny7[i]:= ny7[i]*-1;mny8[i]:= ny8[i]*-1;mny9[i]:= ny9[i]*-1;mny10[i]:= ny10[i]*-1;mny11[i]:= ny11[i]*-1;mny12[i]:= ny12[i]*-1;mny13[i]:= ny13[i]*-1;mny14[i]:= ny14[i]*-1;mny15[i]:= ny15[i]*-1;mny16[i]:= ny16[i]*-1;mny17[i]:= ny17[i]*-1;mny18[i]:= ny18[i]*-1;mny19[i]:= ny19[i]*-1;mny20[i]:= ny20[i]*-1;end;{---------------------------------Mult Prot Rotated Coords--------------------------------------------}Procedure MultProtCoords;beginmnx1[i]:= mnx1[i]*1.1;mnx2[i]:= mnx2[i]*1.1;mnx3[i]:= mnx3[i]*1.1;mnx4[i]:= mnx4[i]*1.1;mnx5[i]:= mnx5[i]*1.1;mnx6[i]:= mnx6[i]*1.1;mnx7[i]:= mnx7[i]*1.1;mnx8[i]:= mnx8[i]*1.1;mnx9[i]:= mnx9[i]*1.1;mnx10[i]:= mnx10[i]*1.1;mnx11[i]:= mnx11[i]*1.1;mnx12[i]:= mnx12[i]*1.1;mnx13[i]:= mnx13[i]*1.1;mnx14[i]:= mnx14[i]*1.1;mnx15[i]:= mnx15[i]*1.1;mnx16[i]:= mnx16[i]*1.1;mnx17[i]:= mnx17[i]*1.1;mnx18[i]:= mnx18[i]*1.1;mnx19[i]:= mnx19[i]*1.1;mnx20[i]:= mnx20[i]*1.1;mny1[i]:= mny1[i]*1.1;mny2[i]:= mny2[i]*1.1;mny3[i]:= mny3[i]*1.1;mny4[i]:= mny4[i]*1.1;mny5[i]:= mny5[i]*1.1;mny6[i]:= mny6[i]*1.1;mny7[i]:= mny7[i]*1.1;mny8[i]:= mny8[i]*1.1;mny9[i]:= mny9[i]*1.1;mny10[i]:= mny10[i]*1.1;mny11[i]:= mny11[i]*1.1;mny12[i]:= mny12[i]*1.1;mny13[i]:= mny13[i]*1.1;mny14[i]:= mny14[i]*1.1;mny15[i]:= mny15[i]*1.1;mny16[i]:= mny16[i]*1.1;mny17[i]:= mny17[i]*1.1;mny18[i]:= mny18[i]*1.1;mny19[i]:= mny19[i]*1.1;mny20[i]:= mny20[i]*1.1;end;{---------------------------------Draw Prot Rotated Coords--------------------------------------------}Procedure DrawProtCoords;begindrawflag:='n';dnx1[i]:= RoundDtoI(mnx1[i]);dnx2[i]:= RoundDtoI(mnx2[i]);dnx3[i]:= RoundDtoI(mnx3[i]);dnx4[i]:= RoundDtoI(mnx4[i]);dnx5[i]:= RoundDtoI(mnx5[i]);dnx6[i]:= RoundDtoI(mnx6[i]);dnx7[i]:= RoundDtoI(mnx7[i]);dnx8[i]:= RoundDtoI(mnx8[i]);dnx9[i]:= RoundDtoI(mnx9[i]);dnx10[i]:= RoundDtoI(mnx10[i]);dnx11[i]:= RoundDtoI(mnx11[i]);dnx12[i]:= RoundDtoI(mnx12[i]);dnx13[i]:= RoundDtoI(mnx13[i]);dnx14[i]:= RoundDtoI(mnx14[i]);dnx15[i]:= RoundDtoI(mnx15[i]);dnx16[i]:= RoundDtoI(mnx16[i]);dnx17[i]:= RoundDtoI(mnx17[i]);dnx18[i]:= RoundDtoI(mnx18[i]);dnx19[i]:= RoundDtoI(mnx19[i]);dnx20[i]:= RoundDtoI(mnx20[i]);dny1[i]:= RoundDtoI(mny1[i]);dny2[i]:= RoundDtoI(mny2[i]);dny3[i]:= RoundDtoI(mny3[i]);dny4[i]:= RoundDtoI(mny4[i]);dny5[i]:= RoundDtoI(mny5[i]);dny6[i]:= RoundDtoI(mny6[i]);dny7[i]:= RoundDtoI(mny7[i]);dny8[i]:= RoundDtoI(mny8[i]);dny9[i]:= RoundDtoI(mny9[i]);dny10[i]:= RoundDtoI(mny10[i]);dny11[i]:= RoundDtoI(mny11[i]);dny12[i]:= RoundDtoI(mny12[i]);dny13[i]:= RoundDtoI(mny13[i]);dny14[i]:= RoundDtoI(mny14[i]);dny15[i]:= RoundDtoI(mny15[i]);dny16[i]:= RoundDtoI(mny16[i]);dny17[i]:= RoundDtoI(mny17[i]);dny18[i]:= RoundDtoI(mny18[i]);dny19[i]:= RoundDtoI(mny19[i]);dny20[i]:= RoundDtoI(mny20[i]);xbase:=750;ybase:=520;repeatdnx1[i]:= dnx1[i]+1;dnx2[i]:= dnx2[i]+1;dnx3[i]:= dnx3[i]+1;dnx4[i]:= dnx4[i]+1;dnx5[i]:= dnx5[i]+1;dnx6[i]:= dnx6[i]+1;dnx7[i]:= dnx7[i]+1;dnx8[i]:= dnx8[i]+1;dnx9[i]:= dnx9[i]+1;dnx10[i]:= dnx10[i]+1;dnx11[i]:= dnx11[i]+1;dnx12[i]:= dnx12[i]+1;dnx13[i]:= dnx13[i]+1;dnx14[i]:= dnx14[i]+1;dnx15[i]:= dnx15[i]+1;dnx16[i]:= dnx16[i]+1;dnx17[i]:= dnx17[i]+1;dnx18[i]:= dnx18[i]+1;dnx19[i]:= dnx19[i]+1;dnx20[i]:= dnx20[i]+1;until dnx11[i] = xbase;repeatdny1[i]:= dny1[i]+1;dny2[i]:= dny2[i]+1;dny3[i]:= dny3[i]+1;dny4[i]:= dny4[i]+1;dny5[i]:= dny5[i]+1;dny6[i]:= dny6[i]+1;dny7[i]:= dny7[i]+1;dny8[i]:= dny8[i]+1;dny9[i]:= dny9[i]+1;dny10[i]:= dny10[i]+1;dny11[i]:= dny11[i]+1;dny12[i]:= dny12[i]+1;dny13[i]:= dny13[i]+1;dny14[i]:= dny14[i]+1;dny15[i]:= dny15[i]+1;dny16[i]:= dny16[i]+1;dny17[i]:= dny17[i]+1;dny18[i]:= dny18[i]+1;dny19[i]:= dny19[i]+1;dny20[i]:= dny20[i]+1;until dny11[i] = ybase;eye:= RoundDtoI((dnx10[i]-dnx13[i])/4);dxeye:= RoundDtoI(dnx13[i]+((dnx10[i]-dnx13[i])/2));dyeye:= RoundDtoI(dny13[i]+((dny10[i]-dny13[i])/2));	pensize(2, 2);	MoveTo(dnx12[i], dny12[i]);	LineTo(dnx11[i], dny11[i]);	LineTo(dnx6[i], dny6[i]);	LineTo(dnx5[i], dny5[i]);	LineTo(dnx2[i], dny2[i]);	LineTo(dnx7[i], dny7[i]);	LineTo(dnx12[i], dny12[i]);	MoveTo(dnx3[i], dny3[i]);	LineTo(dnx9[i], dny9[i]);	LineTo(dnx11[i], dny11[i]);	LineTo(dnx5[i], dny5[i]);	LineTo(dnx3[i], dny3[i]);	LineTo(dnx4[i], dny4[i]);	LineTo(dnx5[i], dny5[i]);	MoveTo(dnx5[i], dny5[i]);	LineTo(dnx1[i], dny1[i]);	LineTo(dnx8[i], dny8[i]);	MoveTo(dnx9[i], dny9[i]);	LineTo(dnx14[i], dny14[i]);	LineTo(dnx19[i], dny19[i]);	LineTo(dnx18[i], dny18[i]);	LineTo(dnx12[i], dny12[i]);	RGBforecolor(green);	MoveTo(dnx15[i], dny15[i]);	LineTo(dnx7[i], dny7[i]);	MoveTo(dnx16[i], dny16[i]);	LineTo(dnx4[i], dny4[i]);	MoveTo(dnx17[i], dny17[i]);	LineTo(dnx6[i], dny6[i]);	RGBforecolor(red);	setrect(circlerect, dnx1[i]-3, dny1[i]-3, dnx1[i]+3, dny1[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx2[i]-3, dny2[i]-3, dnx2[i]+3, dny2[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx3[i]-3, dny3[i]-3, dnx3[i]+3, dny3[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx4[i]-3, dny4[i]-3, dnx4[i]+3, dny4[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx5[i]-3, dny5[i]-3, dnx5[i]+3, dny5[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx6[i]-3, dny6[i]-3, dnx6[i]+3, dny6[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx7[i]-3, dny7[i]-3, dnx7[i]+3, dny7[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx8[i]-3, dny8[i]-3, dnx8[i]+3, dny8[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx9[i]-3, dny9[i]-3, dnx9[i]+3, dny9[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx11[i]-3, dny11[i]-3, dnx11[i]+3, dny11[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx12[i]-3, dny12[i]-3, dnx12[i]+3, dny12[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx20[i]-3, dny20[i]-3, dnx20[i]+3, dny20[i]+3);	PaintOval(circlerect);	RGBforecolor(green);	setrect(circlerect, dnx10[i]-3, dny10[i]-3, dnx10[i]+3, dny10[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx13[i]-3, dny13[i]-3, dnx13[i]+3, dny13[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx14[i]-3, dny14[i]-3, dnx14[i]+3, dny14[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx15[i]-3, dny15[i]-3, dnx15[i]+3, dny15[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx16[i]-3, dny16[i]-3, dnx16[i]+3, dny16[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx17[i]-3, dny17[i]-3, dnx17[i]+3, dny17[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx18[i]-3, dny18[i]-3, dnx18[i]+3, dny18[i]+3);	PaintOval(circlerect);	setrect(circlerect, dnx19[i]-3, dny19[i]-3, dnx19[i]+3, dny19[i]+3);	PaintOval(circlerect);	RGBforecolor(blue);	setrect(eyerect, dxeye-eye, dyeye-eye, dxeye+eye, dyeye+eye);	PaintOval(eyerect);	RGBforecolor(black);end;{---------------------------------UnRotate New Coords--------------------------------------------}Procedure UnrotateNewCoords;begin	rot:=1;	if fixslope[i] > 0 then rot:= 1;	if fixslope[i] < 0 then rot:= -1;	ux1[i]:= (nx1[i]*cos(yaxisfixang[i]*con)) + (rot*ny1[i]*sin(yaxisfixang[i]*con));	uy1[i]:= (ny1[i]*cos(yaxisfixang[i]*con)) - (rot*nx1[i]*sin(yaxisfixang[i]*con));	ux2[i]:= (nx2[i]*cos(yaxisfixang[i]*con)) + (rot*ny2[i]*sin(yaxisfixang[i]*con));	uy2[i]:= (ny2[i]*cos(yaxisfixang[i]*con)) - (rot*nx2[i]*sin(yaxisfixang[i]*con));	ux3[i]:= (nx3[i]*cos(yaxisfixang[i]*con)) + (rot*ny3[i]*sin(yaxisfixang[i]*con));	uy3[i]:= (ny3[i]*cos(yaxisfixang[i]*con)) - (rot*nx3[i]*sin(yaxisfixang[i]*con));	ux4[i]:= (nx4[i]*cos(yaxisfixang[i]*con)) + (rot*ny4[i]*sin(yaxisfixang[i]*con));	uy4[i]:= (ny4[i]*cos(yaxisfixang[i]*con)) - (rot*nx4[i]*sin(yaxisfixang[i]*con));	ux5[i]:= (nx5[i]*cos(yaxisfixang[i]*con)) + (rot*ny5[i]*sin(yaxisfixang[i]*con));	uy5[i]:= (ny5[i]*cos(yaxisfixang[i]*con)) - (rot*nx5[i]*sin(yaxisfixang[i]*con));	ux6[i]:= (nx6[i]*cos(yaxisfixang[i]*con)) + (rot*ny6[i]*sin(yaxisfixang[i]*con));	uy6[i]:= (ny6[i]*cos(yaxisfixang[i]*con)) - (rot*nx6[i]*sin(yaxisfixang[i]*con));	ux7[i]:= (nx7[i]*cos(yaxisfixang[i]*con)) + (rot*ny7[i]*sin(yaxisfixang[i]*con));	uy7[i]:= (ny7[i]*cos(yaxisfixang[i]*con)) - (rot*nx7[i]*sin(yaxisfixang[i]*con));	ux8[i]:= (nx8[i]*cos(yaxisfixang[i]*con)) + (rot*ny8[i]*sin(yaxisfixang[i]*con));	uy8[i]:= (ny8[i]*cos(yaxisfixang[i]*con)) - (rot*nx8[i]*sin(yaxisfixang[i]*con));	ux9[i]:= (nx9[i]*cos(yaxisfixang[i]*con)) + (rot*ny9[i]*sin(yaxisfixang[i]*con));	uy9[i]:= (ny9[i]*cos(yaxisfixang[i]*con)) - (rot*nx9[i]*sin(yaxisfixang[i]*con));		ux10[i]:= (nx10[i]*cos(yaxisfixang[i]*con)) + (rot*ny10[i]*sin(yaxisfixang[i]*con));	uy10[i]:= (ny10[i]*cos(yaxisfixang[i]*con)) - (rot*nx10[i]*sin(yaxisfixang[i]*con));	ux11[i]:= (nx11[i]*cos(yaxisfixang[i]*con)) + (rot*ny11[i]*sin(yaxisfixang[i]*con));	uy11[i]:= (ny11[i]*cos(yaxisfixang[i]*con)) - (rot*nx11[i]*sin(yaxisfixang[i]*con));	ux12[i]:= (nx12[i]*cos(yaxisfixang[i]*con)) + (rot*ny12[i]*sin(yaxisfixang[i]*con));	uy12[i]:= (ny12[i]*cos(yaxisfixang[i]*con)) - (rot*nx12[i]*sin(yaxisfixang[i]*con));	ux13[i]:= (nx13[i]*cos(yaxisfixang[i]*con)) + (rot*ny13[i]*sin(yaxisfixang[i]*con));	uy13[i]:= (ny13[i]*cos(yaxisfixang[i]*con)) - (rot*nx13[i]*sin(yaxisfixang[i]*con));	ux14[i]:= (nx14[i]*cos(yaxisfixang[i]*con)) + (rot*ny14[i]*sin(yaxisfixang[i]*con));	uy14[i]:= (ny14[i]*cos(yaxisfixang[i]*con)) - (rot*nx14[i]*sin(yaxisfixang[i]*con));	ux15[i]:= (nx15[i]*cos(yaxisfixang[i]*con)) + (rot*ny15[i]*sin(yaxisfixang[i]*con));	uy15[i]:= (ny15[i]*cos(yaxisfixang[i]*con)) - (rot*nx15[i]*sin(yaxisfixang[i]*con));	ux16[i]:= (nx16[i]*cos(yaxisfixang[i]*con)) + (rot*ny16[i]*sin(yaxisfixang[i]*con));	uy16[i]:= (ny16[i]*cos(yaxisfixang[i]*con)) - (rot*nx16[i]*sin(yaxisfixang[i]*con));	ux17[i]:= (nx17[i]*cos(yaxisfixang[i]*con)) + (rot*ny17[i]*sin(yaxisfixang[i]*con));	uy17[i]:= (ny17[i]*cos(yaxisfixang[i]*con)) - (rot*nx17[i]*sin(yaxisfixang[i]*con));	ux18[i]:= (nx18[i]*cos(yaxisfixang[i]*con)) + (rot*ny18[i]*sin(yaxisfixang[i]*con));	uy18[i]:= (ny18[i]*cos(yaxisfixang[i]*con)) - (rot*nx18[i]*sin(yaxisfixang[i]*con));	ux19[i]:= (nx19[i]*cos(yaxisfixang[i]*con)) + (rot*ny19[i]*sin(yaxisfixang[i]*con));	uy19[i]:= (ny19[i]*cos(yaxisfixang[i]*con)) - (rot*nx19[i]*sin(yaxisfixang[i]*con));	ux20[i]:= (nx20[i]*cos(yaxisfixang[i]*con)) + (rot*ny20[i]*sin(yaxisfixang[i]*con));	uy20[i]:= (ny20[i]*cos(yaxisfixang[i]*con)) - (rot*nx20[i]*sin(yaxisfixang[i]*con));end;{---------------------------------CalcLinksFromCoords--------------------------------------------}Procedure CalcLinksFromCoords;begin	holdi:= i;	i:=0;	repeat		begin			i:=i+1;			f1[i]:= sqrt(sqr(x9[i] - x11[i]) + sqr(y9[i] - y11[i]));			pal[i]:= sqrt(sqr(x9[i] - x3[i]) + sqr(y9[i] - y3[i]));			max[i]:= sqrt(sqr(x3[i] - x5[i]) + sqr(y3[i] - y5[i]));			lj[i]:= sqrt(sqr(x5[i] - x11[i]) + sqr(y5[i] - y11[i]));			d1[i]:= sqrt(sqr(x9[i] - x5[i]) + sqr(y9[i] - y5[i]));			pmasc1[i]:= sqrt(sqr(x1[i] - x3[i]) + sqr(y1[i] - y3[i]));			pmasc2[i]:= sqrt(sqr(x1[i] - x8[i]) + sqr(y1[i] - y8[i]));			pmalv[i]:= sqrt(sqr(x1[i] - x5[i]) + sqr(y1[i] - y5[i]));			denttop[i]:= sqrt(sqr(x2[i] - x5[i]) + sqr(y2[i] - y5[i]));			ljbot[i]:= sqrt(sqr(x2[i] - x11[i]) + sqr(y2[i] - y11[i]));			dcorner[i]:= sqrt(sqr(x5[i] - x20[i]) + sqr(y5[i] - y20[i]));			openlev[i]:= sqrt(sqr(x12[i] - x11[i]) + sqr(y12[i] - y11[i]));			jawbot[i]:= sqrt(sqr(x12[i] - x2[i]) + sqr(y12[i] - y2[i]));			gaper[i]:= sqrt(sqr(x1[i] - x2[i]) + sqr(y1[i] - y2[i]));			d1to9[i]:= sqrt(sqr(x1[i] - x9[i]) + sqr(y1[i] - y9[i]));			d1to3[i]:= sqrt(sqr(x1[i] - x3[i]) + sqr(y1[i] - y3[i]));			d1to8[i]:= sqrt(sqr(x1[i] - x8[i]) + sqr(y1[i] - y8[i]));			d7to11[i]:= sqrt(sqr(x7[i] - x11[i]) + sqr(y7[i] - y11[i]));			d7to9[i]:= sqrt(sqr(x7[i] - x9[i]) + sqr(y7[i] - y9[i]));			d6to11[i]:= sqrt(sqr(x6[i] - x11[i]) + sqr(y6[i] - y11[i]));			d6to9[i]:= sqrt(sqr(x6[i] - x9[i]) + sqr(y6[i] - y9[i]));			d4to11[i]:= sqrt(sqr(x4[i] - x11[i]) + sqr(y4[i] - y11[i]));			d4to9[i]:= sqrt(sqr(x4[i] - x9[i]) + sqr(y4[i] - y9[i]));			d8to9[i]:= sqrt(sqr(x8[i] - x9[i]) + sqr(y8[i] - y9[i]));			d1to20[i]:= sqrt(sqr(x1[i] - x20[i]) + sqr(y1[i] - y20[i]));			d2to20[i]:= sqrt(sqr(x2[i] - x20[i]) + sqr(y2[i] - y20[i]));			d4to5[i]:= sqrt(sqr(x4[i] - x5[i]) + sqr(y4[i] - y5[i]));			d3to4[i]:= sqrt(sqr(x3[i] - x4[i]) + sqr(y3[i] - y4[i]));			d3to8[i]:= sqrt(sqr(x3[i] - x8[i]) + sqr(y3[i] - y8[i]));			d9to20[i]:= sqrt(sqr(x9[i] - x20[i]) + sqr(y9[i] - y20[i]));			d11to20[i]:= sqrt(sqr(x11[i] - x20[i]) + sqr(y11[i] - y20[i]));			d10to13[i]:= sqrt(sqr(x10[i] - x13[i]) + sqr(y10[i] - y13[i]));			d1to19[i]:= sqrt(sqr(x1[i] - x19[i]) + sqr(y1[i] - y19[i]));			A1[i]:= sqrt(sqr(x4[i] - x16[i]) + sqr(y4[i] - y16[i]));			A2[i]:= sqrt(sqr(x6[i] - x17[i]) + sqr(y6[i] - y17[i]));			A3[i]:= sqrt(sqr(x7[i] - x15[i]) + sqr(y7[i] - y15[i]));		end;	until i = fishcount;	i:= holdi;end;{Program JawsModel}begin	InitGraf(@qd.thePort);	InitFonts;	InitWindows;	InitMenus;	TEInit;	InitDialogs(nil);		begin;			err:=0;			firsttime:=0;			i:=1;			fishok[1]:=0;			SetRGB(white, 65535, 65535, 65535);			SetRGB(black, 0, 0, 0);			SetRGB(lightgray, 61166, 61166, 61166);			SetRGB(darkGray, 52428, 52428, 52428);			SetRGB(blue, 0, 0, 38000);			SetRGB(red, 45000, 0, 0);			SetRGB(purple, 45000, 0, 45000);			SetRGB(green, 0, 38000, 0);			SetRGB(brightBlue, 0, 0, 60000);			SetRGB(yellow, 52000, 52000, 0);			HandleDialog;		end;end.